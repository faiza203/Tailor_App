[{"/home/faiza/Documents/Git Hub/tailor_app/src/index.tsx":"1","/home/faiza/Documents/Git Hub/tailor_app/src/components/index.tsx":"2","/home/faiza/Documents/Git Hub/tailor_app/src/components/Home.tsx":"3","/home/faiza/Documents/Git Hub/tailor_app/src/components/SignIn.tsx":"4","/home/faiza/Documents/Git Hub/tailor_app/src/components/Nav.tsx":"5","/home/faiza/Documents/Git Hub/tailor_app/src/components/firebase.tsx":"6","/home/faiza/Documents/Git Hub/tailor_app/src/components/NotFound.tsx":"7","/home/faiza/Documents/Git Hub/tailor_app/src/components/AddMeasurment.tsx":"8","/home/faiza/Documents/Git Hub/tailor_app/src/components/history.tsx":"9","/home/faiza/Documents/Git Hub/tailor_app/src/components/store.tsx":"10","/home/faiza/Documents/Git Hub/tailor_app/src/components/SignUp.tsx":"11","/home/faiza/Documents/Git Hub/tailor_app/src/components/Customers.tsx":"12","/home/faiza/Documents/Git Hub/tailor_app/src/components/DashBoard.tsx":"13","/home/faiza/Documents/Git Hub/tailor_app/src/components/reducer.tsx":"14","/home/faiza/Documents/Git Hub/tailor_app/src/App.tsx":"15","/home/faiza/Documents/Git Hub/tailor_app/src/components/AddDetail.tsx":"16","/home/faiza/Documents/Git Hub/tailor_app/src/components/AddOrder.tsx":"17","/home/faiza/Documents/Git Hub/tailor_app/src/components/AlreadyMeasurment.tsx":"18","/home/faiza/Documents/Git Hub/tailor_app/src/components/Condition.tsx":"19","/home/faiza/Documents/Git Hub/tailor_app/src/components/alreadyCondition.tsx":"20"},{"size":330,"mtime":1606992343000,"results":"21","hashOfConfig":"22"},{"size":861,"mtime":1607489276310,"results":"23","hashOfConfig":"22"},{"size":656,"mtime":1606992343000,"results":"24","hashOfConfig":"22"},{"size":1463,"mtime":1607435945390,"results":"25","hashOfConfig":"22"},{"size":987,"mtime":1607436014526,"results":"26","hashOfConfig":"22"},{"size":562,"mtime":1606992343000,"results":"27","hashOfConfig":"22"},{"size":595,"mtime":1607251724440,"results":"28","hashOfConfig":"22"},{"size":3594,"mtime":1607488867362,"results":"29","hashOfConfig":"22"},{"size":95,"mtime":1607326904207,"results":"30","hashOfConfig":"22"},{"size":12563,"mtime":1607514824505,"results":"31","hashOfConfig":"22"},{"size":1723,"mtime":1607435958695,"results":"32","hashOfConfig":"22"},{"size":2000,"mtime":1607434249041,"results":"33","hashOfConfig":"22"},{"size":1704,"mtime":1607264523633,"results":"34","hashOfConfig":"22"},{"size":2991,"mtime":1607511593888,"results":"35","hashOfConfig":"22"},{"size":907,"mtime":1607434161875,"results":"36","hashOfConfig":"22"},{"size":2217,"mtime":1607514884270,"results":"37","hashOfConfig":"22"},{"size":1452,"mtime":1607434369573,"results":"38","hashOfConfig":"22"},{"size":1972,"mtime":1607435221982,"results":"39","hashOfConfig":"22"},{"size":1155,"mtime":1607491376943,"results":"40","hashOfConfig":"22"},{"size":4605,"mtime":1607514845209,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"34fyjp",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"44"},"/home/faiza/Documents/Git Hub/tailor_app/src/index.tsx",[],["89","90"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/index.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/Home.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/SignIn.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/Nav.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/firebase.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/NotFound.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/AddMeasurment.tsx",["91"],"import React from 'react';\nimport firebase from 'firebase';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { checkFirebaseMeasurment, checkMeasurment } from './index';\nimport { history } from './history';\nimport { AlreadyMeasurment } from './AlreadyMeasurment';\n\nexport function AddMeasurment() {\n    const client: any = localStorage.getItem(\"customer\");\n    const tailor: any = localStorage.getItem(\"tailor\");\n    const dispatch = useDispatch();\n    const customerState = useSelector((state: any) => state);\n    const promise = () => {\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Measurment\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const measurment = client.data().measurmentEle;\n                    checkFirebaseMeasurment(clientName, measurment, dispatch, customerState.measurment);\n                })\n            }).catch()\n    }\n    promise();\n\n    const saveMeasurment: any = (e: any) => {\n        e.preventDefault();\n\n        const [Length, Width, Neck, Chest, Waist, Bust, ArmLenght, ShoulderLenght, LegLenght] = e.target;\n        const measurmentEle = {\n            Length: Length.value, Width: Width.value, Chest: Chest.value, Waist: Waist.value, Neck: Neck.value, ArmLenght: ArmLenght.value, Shoulder: ShoulderLenght.value, LegLenght: LegLenght.value,\n        }\n\n        firebase.database().ref().on(\"child_added\", snap => {\n            const promise = firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Measurment\").doc(client).set({\n                measurmentEle\n            });\n            promise.then(() => {\n                alert(\"Data is updated\");\n                checkMeasurment(client, measurmentEle, dispatch, customerState.measurment);\n                history.push(\"/DashBoard\");\n                history.replace(\"/DashBoard\");\n            })\n            promise.catch((err) => {\n                alert(err.message)\n            })\n        });\n    }\n\n    return (\n        <div>\n            <h1 className=\"h1 text-muted\">Measurment</h1>\n            <div className=\"measurment\">\n                <AlreadyMeasurment client={client} />\n                <form className=\"mr-5 \" onSubmit={saveMeasurment}>\n                    <input className=\"form-control\" type=\"number\" placeholder=\"Length\" required />\n                    <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Width\" required />\n                    <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Neck\" required />\n                    <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Chest\" required />\n                    <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Waist\" required />\n                    <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Bust\" required />\n                    <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Arm Width\" required />\n                    <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Shoulder Width\" required />\n                    <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Leg Lenght\" required />\n                    <button className=\"btn btn-outline-success d-inline\" type=\"submit\">Save Measurment</button>\n                    <button className=\"btn btn-outline-danger\" type=\"button\" onClick={() => { history.push(\"/DashBoard\"); history.replace('/DashBoard') }}>Cancle</button>\n                </form>\n            </div>\n        </div>\n    )\n}\n","/home/faiza/Documents/Git Hub/tailor_app/src/components/history.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/store.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/SignUp.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/Customers.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/DashBoard.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/reducer.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/App.tsx",["92"],"import React from 'react';\nimport { Router, Route, Switch } from 'react-router';\nimport { Nav, Home, SignUp, SignIn, DashBoard, NotFound, history, AddDetail , AlreadyMeasurment, AddMeasurment} from './components/index';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n\n  return (\n    <div className=\"App text-center\">\n      <Router history={history}>\n        <Nav />\n        <Switch>\n          <Route path=\"/\" component={Home} exact></Route>\n          <Route path=\"/SignUp\" component={SignUp}></Route>\n          <Route path=\"/SignIn\" component={SignIn}></Route>\n          <Route path=\"/DashBoard\" component={DashBoard}></Route>\n          <Route path=\"/Measurment\" component={AddMeasurment}></Route>\n          <Route path=\"/Orders\" component={AddDetail}></Route>\n          <Route path=\"\" component={NotFound}></Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/home/faiza/Documents/Git Hub/tailor_app/src/components/AddDetail.tsx",["93","94"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/AddOrder.tsx",["95"],"import React from 'react';\nimport firebase from 'firebase';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { checkOrderFirebase } from './index';\nexport const AddOrder = (props: any) => {\n    const dispatch = useDispatch();\n    const customerState = useSelector((state: any) => state);\n    const tailor: any = localStorage.getItem(\"tailor\");\n    const promise = () => {\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Orders\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const orders = client.data().orders;\n\n                    checkOrderFirebase(clientName, orders, customerState.orders, dispatch)\n                })\n            });\n    }\n    promise();\n\n    return (<div>\n        <h1 className=\"h1 text-muted\">Orders</h1>\n        <p className=\"text-muted\">If you want to stitch new dress: </p>\n        <input className=\"d-inline form-control\" type=\"text\" placeholder=\"Add number of orders here\" />\n        {customerState.orders.length > 0 ?\n            customerState.orders.map((order: any[], index: number) => {\n                if (order[0] === props.client) {\n                    return (\n                        <p key={index} className=\"text-muted mt-1\">Already Orders are {order[1]}</p>\n                    )\n                }\n            }) :\n            null\n        }\n    </div>)\n}","/home/faiza/Documents/Git Hub/tailor_app/src/components/AlreadyMeasurment.tsx",["96","97"],"import React from 'react';\nimport { useSelector , useDispatch} from 'react-redux';\nimport { AddMeasurment , checkFirebaseMeasurment } from './index';\nimport firebase from 'firebase';\n\nexport function AlreadyMeasurment(props: any) {\n    const tailor: any = localStorage.getItem(\"tailor\");\n    const dispatch = useDispatch();\n    const customerState = useSelector((state: any) => state);\n    const promise = () => {\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Measurment\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const measurment = client.data().measurmentEle;\n                    checkFirebaseMeasurment(clientName, measurment, dispatch, customerState.measurment);\n                })\n            }).catch()\n    }\n    promise();\n    \n    return (\n        <div >\n            <div id=\"Measurment\">\n                {customerState.measurment.length > 0 ?\n                    customerState.measurment.map((measurment: any[], index: number) => {\n                        if (measurment[0] === props.client) {\n                            return (<ul key={index} className=\"mr-5\">\n                                <li className=\"text-muted\"> Length : {measurment[1].Length}</li>\n                                <li className=\"text-muted\"> Width : {measurment[1].Width}</li>\n                                <li className=\"text-muted\"> Neck : {measurment[1].Neck}</li>\n                                <li className=\"text-muted\"> Waist : {measurment[1].Waist}</li>\n                                <li className=\"text-muted\"> Middle : {measurment[1].Middle}</li>\n                                <li className=\"text-muted\"> Leg Lenght : {measurment[1].LegLenght}</li>\n                            </ul>)\n                     }\n                     }) :\n                    null\n                }\n            </div>\n        </div>\n    )\n}\n","/home/faiza/Documents/Git Hub/tailor_app/src/components/Condition.tsx",["98","99","100","101","102"],"import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport firebase from 'firebase';\nimport { checkStitch, checkDeliveredFirebase, checkUnStitchFirebase } from './store';\n\nexport const Condition = (props: any) => {\n    const customerState = useSelector((state: any) => state);\n    return (<div>\n        {\n            customerState.orders.length > 0 ?\n                <div className=\"condition\">\n                    <h1 className=\"h1 text-muted\">Condition</h1>\n                    <p className=\"text-muted\">If you want to add Condition : </p>\n                    <input className=\"w-75 d-inline form-control\" type=\"number\" placeholder=\"Add stitched dress number\" />\n                    <input className=\"w-75 d-inline mt-1 form-control\" type=\"number\" placeholder=\"Add develired dress number\" />\n                    <input className=\"w-75 d-inline mt-1 form-control\" type=\"number\" placeholder=\"Add un stitched dress number\" />\n                    <input className=\"w-75 d-inline mt-1 form-control\" type=\"number\" placeholder=\"Add lost dress number\" />\n                </div> :\n                null\n        }\n    </div>\n    )\n}\n","/home/faiza/Documents/Git Hub/tailor_app/src/components/alreadyCondition.tsx",["103","104","105","106","107","108"],"import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport firebase from 'firebase';\nimport { checkStitch, checkDeliveredFirebase, checkUnStitchFirebase, checkLostFirebase, checkOrderFirebase, checkLost } from './store';\n\nexport const AlreadyCondition = (props: any) => {\n    const dispatch = useDispatch();\n    const customerState = useSelector((state: any) => state);\n    const promise = () => {\n        firebase.firestore().collection('Tailor App').doc(props.tailor).collection(\"Sticthed\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().sticthed;\n                    checkStitch(clientName, conditionAmount, customerState.stitch, dispatch)\n                })\n            }).catch();\n        firebase.firestore().collection('Tailor App').doc(props.tailor).collection(\"Delivered\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().delivered;\n                    checkDeliveredFirebase(clientName, conditionAmount, customerState.delivered, dispatch)\n                })\n            }).catch()\n        firebase.firestore().collection('Tailor App').doc(props.tailor).collection(\"UnStitched\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().unstitched;\n                    checkUnStitchFirebase(clientName, conditionAmount, customerState.unStitch, dispatch);\n                })\n            }).catch()\n        firebase.firestore().collection('Tailor App').doc(props.tailor).collection(\"Losted\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().losted;\n                    checkLostFirebase(props.tailor, clientName, conditionAmount, customerState.lost, dispatch);\n                })\n            }).catch()\n    }\n    promise();\n\n    return (\n        <div>        {\n            customerState.orders.length > 0 ?\n                customerState.stitch.length > 0 ?\n                    customerState.stitch.map((stitch: any[], index: number) => {\n                        if (stitch[0] === props.client) {\n                            return (\n                                <p className=\"text-muted mb-1\" key={index}>  {stitch[1]} orders has stitched.</p>\n                            )\n                        }\n                    }) : null\n                : null\n        }\n            {\n                customerState.orders.length > 0 ?\n                    customerState.delivered.length > 0 ?\n                        customerState.delivered.map((deliver: any[], index: number) => {\n                            if (deliver[0] === props.client) {\n                                return (\n                                    <p className=\"text-muted\" key={index}>  {deliver[1]} orders has delivered.</p>\n                                )\n                            }\n                        }) : null\n                    : null\n            }\n            {\n                customerState.orders.length > 0 ?\n                    customerState.unStitch.length > 0 ?\n                        customerState.unStitch.map((unStitch: any[], index: number) => {\n                            if (unStitch[0] === props.client) {\n                                return (\n                                    <p className=\"text-muted\" key={index}>  {unStitch[1]} orders are un stitched.</p>\n                                )\n                            } else {\n                                console.log(unStitch[0], props.client);\n\n                            }\n                        }) : null\n                    : null\n            }\n            {\n                customerState.orders.length > 0 ?\n                    customerState.lost.length > 0 ?\n                        customerState.lost.map((losted: any, index: number) => {\n                            if (losted[0] === props.client) {\n                                return (\n                                    <p className=\"text-muted\" key={index}> {losted[1]} orders has losted.</p>\n                                )\n                            }\n                        }) : null\n                    : null\n            }\n        </div>\n    )\n}",{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":28,"column":51,"nodeType":"115","messageId":"116","endLine":28,"endColumn":55},{"ruleId":"113","severity":1,"message":"117","line":3,"column":79,"nodeType":"115","messageId":"116","endLine":3,"endColumn":96},{"ruleId":"113","severity":1,"message":"118","line":5,"column":65,"nodeType":"115","messageId":"116","endLine":5,"endColumn":82},{"ruleId":"113","severity":1,"message":"119","line":6,"column":8,"nodeType":"115","messageId":"116","endLine":6,"endColumn":16},{"ruleId":"120","severity":1,"message":"121","line":27,"column":68,"nodeType":"122","messageId":"123","endLine":27,"endColumn":70},{"ruleId":"113","severity":1,"message":"124","line":3,"column":10,"nodeType":"115","messageId":"116","endLine":3,"endColumn":23},{"ruleId":"120","severity":1,"message":"121","line":26,"column":85,"nodeType":"122","messageId":"123","endLine":26,"endColumn":87},{"ruleId":"113","severity":1,"message":"125","line":2,"column":23,"nodeType":"115","messageId":"116","endLine":2,"endColumn":34},{"ruleId":"113","severity":1,"message":"119","line":3,"column":8,"nodeType":"115","messageId":"116","endLine":3,"endColumn":16},{"ruleId":"113","severity":1,"message":"126","line":4,"column":10,"nodeType":"115","messageId":"116","endLine":4,"endColumn":21},{"ruleId":"113","severity":1,"message":"127","line":4,"column":23,"nodeType":"115","messageId":"116","endLine":4,"endColumn":45},{"ruleId":"113","severity":1,"message":"128","line":4,"column":47,"nodeType":"115","messageId":"116","endLine":4,"endColumn":68},{"ruleId":"113","severity":1,"message":"129","line":4,"column":89,"nodeType":"115","messageId":"116","endLine":4,"endColumn":107},{"ruleId":"113","severity":1,"message":"130","line":4,"column":109,"nodeType":"115","messageId":"116","endLine":4,"endColumn":118},{"ruleId":"120","severity":1,"message":"121","line":49,"column":77,"nodeType":"122","messageId":"123","endLine":49,"endColumn":79},{"ruleId":"120","severity":1,"message":"121","line":61,"column":85,"nodeType":"122","messageId":"123","endLine":61,"endColumn":87},{"ruleId":"120","severity":1,"message":"121","line":73,"column":85,"nodeType":"122","messageId":"123","endLine":73,"endColumn":87},{"ruleId":"120","severity":1,"message":"121","line":88,"column":77,"nodeType":"122","messageId":"123","endLine":88,"endColumn":79},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"@typescript-eslint/no-unused-vars","'Bust' is assigned a value but never used.","Identifier","unusedVar","'AlreadyMeasurment' is defined but never used.","'checkLostFirebase' is defined but never used.","'firebase' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'AddMeasurment' is defined but never used.","'useDispatch' is defined but never used.","'checkStitch' is defined but never used.","'checkDeliveredFirebase' is defined but never used.","'checkUnStitchFirebase' is defined but never used.","'checkOrderFirebase' is defined but never used.","'checkLost' is defined but never used.","no-global-assign","no-unsafe-negation"]