[{"/home/faiza/Documents/Git Hub/tailor_app/src/index.tsx":"1","/home/faiza/Documents/Git Hub/tailor_app/src/components/Home.tsx":"2","/home/faiza/Documents/Git Hub/tailor_app/src/components/SignUp.tsx":"3","/home/faiza/Documents/Git Hub/tailor_app/src/components/Customers.tsx":"4","/home/faiza/Documents/Git Hub/tailor_app/src/components/AddDetail.tsx":"5","/home/faiza/Documents/Git Hub/tailor_app/src/components/Condition.tsx":"6","/home/faiza/Documents/Git Hub/tailor_app/src/components/alreadyCondition.tsx":"7","/home/faiza/Documents/Git Hub/tailor_app/src/components/reducer.tsx":"8","/home/faiza/Documents/Git Hub/tailor_app/src/components/AlreadyMeasurment.tsx":"9","/home/faiza/Documents/Git Hub/tailor_app/src/App.tsx":"10","/home/faiza/Documents/Git Hub/tailor_app/src/components/firebase.tsx":"11","/home/faiza/Documents/Git Hub/tailor_app/src/components/DashBoard.tsx":"12","/home/faiza/Documents/Git Hub/tailor_app/src/components/store.tsx":"13","/home/faiza/Documents/Git Hub/tailor_app/src/components/AddMeasurment.tsx":"14","/home/faiza/Documents/Git Hub/tailor_app/src/components/NotFound.tsx":"15","/home/faiza/Documents/Git Hub/tailor_app/src/components/EditMeasurment.tsx":"16","/home/faiza/Documents/Git Hub/tailor_app/src/components/index.tsx":"17","/home/faiza/Documents/Git Hub/tailor_app/src/components/AddOrder.tsx":"18","/home/faiza/Documents/Git Hub/tailor_app/src/components/SignIn.tsx":"19"},{"size":330,"mtime":1606992343000,"results":"20","hashOfConfig":"21"},{"size":656,"mtime":1606992343000,"results":"22","hashOfConfig":"21"},{"size":2503,"mtime":1607930057588,"results":"23","hashOfConfig":"21"},{"size":1899,"mtime":1608185439802,"results":"24","hashOfConfig":"21"},{"size":4175,"mtime":1608184494610,"results":"25","hashOfConfig":"21"},{"size":1274,"mtime":1608025796016,"results":"26","hashOfConfig":"21"},{"size":6018,"mtime":1608025832766,"results":"27","hashOfConfig":"21"},{"size":4833,"mtime":1608187476323,"results":"28","hashOfConfig":"21"},{"size":5010,"mtime":1608184118626,"results":"29","hashOfConfig":"21"},{"size":975,"mtime":1607760005743,"results":"30","hashOfConfig":"21"},{"size":562,"mtime":1606992343000,"results":"31","hashOfConfig":"21"},{"size":2428,"mtime":1608186634095,"results":"32","hashOfConfig":"21"},{"size":16807,"mtime":1608187301377,"results":"33","hashOfConfig":"21"},{"size":7044,"mtime":1608184425192,"results":"34","hashOfConfig":"21"},{"size":595,"mtime":1607251724440,"results":"35","hashOfConfig":"21"},{"size":7239,"mtime":1608184248706,"results":"36","hashOfConfig":"21"},{"size":951,"mtime":1608186024425,"results":"37","hashOfConfig":"21"},{"size":1462,"mtime":1608038933430,"results":"38","hashOfConfig":"21"},{"size":1598,"mtime":1607930500532,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ytme69",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"51"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"51"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":8,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"51"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/faiza/Documents/Git Hub/tailor_app/src/index.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/Home.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/SignUp.tsx",[],["86","87"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/Customers.tsx",["88"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/AddDetail.tsx",[],["89","90"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/Condition.tsx",["91"],"import { useSelector } from 'react-redux';\n\nexport const Condition = () => {\n    const customerState = useSelector((state: any) => state);\n    const client: any = customerState.customer[0];\n    return (<div id=\" Condition\">\n        {customerState.orders.length > 0 ?\n            customerState.orders.map((order: any[], index: number) => {\n                if (order[0].toUpperCase() === client) {\n                    return (\n                        <div className=\"condition ml-5\" key={index}>\n                            <h1 className=\"h1 text-muted\">Condition</h1>\n                            <p className=\"text-muted\">If you want to  add   Condition : </p>\n                            <input type=\"number\" placeholder=\" Stitched  \" />\n                            <input className=\" mt-1 \" type=\"number\" placeholder=\" Delivered  \" />\n                            <input className=\" mt-1 \" type=\"number\" placeholder=\" Un Stitched  \" />\n                            <input className=\" mt-1 \" type=\"number\" placeholder=\" Lost  \" />\n                            <input className=\" mt-1 \" type=\"number\" placeholder=\" Out of Order Stitched  \" />\n                        </div>\n                    )\n                }\n            }) :\n            null\n        }\n\n    </div>\n    )\n}\n","/home/faiza/Documents/Git Hub/tailor_app/src/components/alreadyCondition.tsx",["92","93","94","95","96","97","98"],"import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport firebase from 'firebase';\nimport { checkStitch, checkDeliveredFirebase, checkUnStitchFirebase, checkLostFirebase, checkOutOfOrder, checkLost, checkOutOfOrderFirebase } from './store';\n\nexport const AlreadyCondition = () => {\n    const dispatch = useDispatch();\n    const customerState = useSelector((state: any) => state);\n    const tailor: any = customerState.tailors[0];\n    const client: any = customerState.customer[0];\n    const promise = () => {\n        firebase.firestore().collection('Condition').doc(tailor).collection(\"Sticthed\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().sticthed;\n                    checkStitch(clientName, conditionAmount, customerState, dispatch)\n                })\n            }).catch();\n        firebase.firestore().collection('Condition').doc(tailor).collection(\"Delivered\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().delivered;\n                    checkDeliveredFirebase(clientName, conditionAmount, customerState, dispatch)\n                })\n            }).catch()\n        firebase.firestore().collection('Condition').doc(tailor).collection(\"UnStitched\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().unstitched;\n                    checkUnStitchFirebase(clientName, conditionAmount, customerState, dispatch);\n                })\n            }).catch()\n        firebase.firestore().collection('Condition').doc(tailor).collection(\"Losted\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().losted;\n                    checkLostFirebase(clientName, conditionAmount, customerState, dispatch);\n                })\n            }).catch()\n        firebase.firestore().collection('Condition').doc(tailor).collection(\"OutOfOrder\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().OutOfOrder;\n                    checkOutOfOrder(clientName, conditionAmount, customerState, dispatch);\n                })\n            }).catch()\n    }\n    promise();\n\n    return (\n        <div id=\"condition\" className=\"mt-5 text-left ml-5\">\n            <div className=\"mt-5\">\n                {\n                    customerState.orders.length > 0 ?\n                        customerState.stitch.length > 0 ?\n                            customerState.stitch.map((stitch: any[], index: number) => {\n                                if (stitch[0] === client) {\n                                    return (\n                                        <p className=\"text-muted\" key={index}>  {stitch[1]} orders has stitched.</p>\n                                    )\n                                }\n                            }) : null\n                        : null\n                }\n                {\n                    customerState.orders.length > 0 ?\n                        customerState.delivered.length > 0 ?\n                            customerState.delivered.map((deliver: any[], index: number) => {\n                                if (deliver[0] === client) {\n                                    return (\n                                        <p className=\"text-muted\" key={index}>  {deliver[1]} orders has delivered.</p>\n                                    )\n                                }\n                            }) : null\n                        : null\n                }\n                {\n                    customerState.orders.length > 0 ?\n                        customerState.unStitch.length > 0 ?\n                            customerState.unStitch.map((unStitch: any[], index: number) => {\n                                if (unStitch[0] === client) {\n                                    return (\n                                        <p className=\"text-muted\" key={index}>  {unStitch[1]} orders are un stitched.</p>\n                                    )\n                                } else {\n                                    console.log(unStitch[0], client);\n\n                                }\n                            }) : null\n                        : null\n                }\n                {\n                    customerState.orders.length > 0 ?\n                        customerState.lost.length > 0 ?\n                            customerState.lost.map((losted: any, index: number) => {\n                                if (losted[0] === client) {\n                                    return (\n                                        <p className=\"text-muted\" key={index}> {losted[1]} orders has losted.</p>\n                                    )\n                                }\n                            }) : null\n                        : null\n                }\n                {\n                    customerState.outOfOrder.length > 0 ?\n                        customerState.outOfOrder.length > 0 ?\n                            customerState.outOfOrder.map((outOfOrder: any, index: number) => {\n                                if (outOfOrder[0] === client) {\n                                    return (\n                                        <p className=\"text-muted\" key={index}> {outOfOrder[1]} orders has wrong stitched.</p>\n                                    )\n                                }\n                            }) : null\n                        : null\n                }\n            </div>\n        </div>\n    )\n}","/home/faiza/Documents/Git Hub/tailor_app/src/components/reducer.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/AlreadyMeasurment.tsx",["99","100"],"import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { checkMeasurment, checkFirebaseMeasurment, deleteClient, history } from './index';\nimport firebase from 'firebase';\n\nexport function AlreadyMeasurment(props: any) {\n    const customerState = useSelector((state: any) => state);\n    const tailor: any = customerState.tailors[0];\n    const client: any = customerState.customer[0];\n    const dispatch = useDispatch();\n    const promise = () => {\n        firebase.firestore().collection('Measurments').doc(tailor).collection(\"Customer\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const measurment = client.data().measurmentEle;\n                    checkFirebaseMeasurment(clientName, measurment, dispatch, customerState.measurment);\n                })\n            }).catch()\n    }\n    promise();\n    const saveMeasurment: any = (e: any) => {\n        e.preventDefault();\n\n        const [Length, Width, Neck, Chest, Waist, Bust, ArmLenght, ShoulderLenght, LegLenght] = e.target;\n        const measurmentEle = {\n            Length: Length.value, Width: Width.value, Chest: Chest.value, Bust: Bust.value, Waist: Waist.value, Neck: Neck.value, ArmLenght: ArmLenght.value, Shoulder: ShoulderLenght.value, LegLenght: LegLenght.value,\n        }\n        firebase.database().ref().on(\"child_added\", snap => {\n            const promise = firebase.firestore().collection('Measurment').doc(tailor).collection(\"Customers\").doc(client).set({\n                measurmentEle\n            });\n            promise.then(() => {\n                checkMeasurment( client, measurmentEle, dispatch, customerState.measurment);\n                history.push(\"/Measurment\");\n                history.replace(\"/Measurment\");\n                dispatch(deleteClient());\n            })\n            promise.catch((err) => {\n                alert(err.message);\n                dispatch(deleteClient());\n            })\n        });\n    }\n    return (\n        <div >\n            {customerState.tailors.length > 0 ?\n                customerState.measurment.map((measurment: any, index: number) => {\n                    if (measurment[0] === client) {\n                        return (<div key={index} className=\"mr-5\">\n                            <ul key={index + 10} className=\"measurment\">\n                                <li key={index + 1} className=\"text-muted\"> Length : {measurment[1].Length}</li>\n                                <li key={index + 2} className=\"text-muted\"> Width : {measurment[1].Width}</li>\n                                <li key={index + 3} className=\"text-muted\"> Neck : {measurment[1].Neck}</li>\n                                <li key={index + 4} className=\"text-muted\"> Waist : {measurment[1].Waist}</li>\n                                <li key={index + 5} className=\"text-muted\"> Bust : {measurment[1].Bust}</li>\n                                <li key={index + 6} className=\"text-muted\"> Chest : {measurment[1].Chest}</li>\n                                <li key={index + 7} className=\"text-muted\"> Arm Lenght : {measurment[1].ArmLenght}</li>\n                                <li key={index + 8} className=\"text-muted\"> Shoulder Length : {measurment[1].Shoulder}</li>\n                                <li key={index + 9} className=\"text-muted\"> Leg Lenght : {measurment[1].LegLenght}</li>\n                            </ul>\n                            <button className=\"btn btn-outline-danger\" onClick={() => {\n                                history.push('/EditMeasurment')\n                                history.replace('/EditMeasurment');\n                            }} >Edit</button>\n                            <button className=\"btn btn-outline-success\" onClick={() => {\n                                history.push('/Dashboard')\n                                history.replace('/Dashboard');\n                                dispatch(deleteClient());\n                            }}\n                            >Cancle</button>\n                        </div>)\n                    }\n                }) :\n                <div>\n                    <h1 className=\"h1 font-italic text-muted\">\n                        Please login first\n                 </h1>\n                    <button className=\"btn btn-outline-danger\" onClick={\n                        () => {\n                            history.push('/SignIn')\n                            history.replace('/SignIn')\n                        }\n                    }>\n                        Go to Sign In\n                 </button>\n                    <button className=\"btn btn-outline-success\" onClick={\n                        () => {\n                            history.push('/SignUp')\n                            history.replace('/SignUp')\n                        }\n                    }>\n                        Go to Sign Up\n                 </button>\n                </div>\n            }\n        </div>\n    )\n}","/home/faiza/Documents/Git Hub/tailor_app/src/App.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/firebase.tsx",[],["101","102"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/DashBoard.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/store.tsx",["103","104","105","106","107","108","109","110","111","112","113","114","115","116"],"import { createStore } from 'redux';\nimport TailorReducer from './reducer';\nimport firebase from 'firebase';\nexport const store = createStore(TailorReducer);\nexport function addTailor(tailor: any) {\n    return {\n        type: \"Add_Tailor\",\n        tailor\n    }\n}\nexport function deleteTailor() {\n    console.log(\"Sign Out\");\n    \n    return {\n        type: \"Delete_Tailor\"\n    }\n}\n\nexport const checkCustomer = (client: any, customerState: any, dispatch: any) => {\n    let arr = [];\n    if (client.trim() === \"\") {\n        alert(\"Please add a value\")\n    } else {\n        if (customerState.clients.length > 0) {\n            customerState.clients.forEach((customer: any) => {\n                if (customer !== client) {\n                    arr.push(\"yes\");\n                }\n            })\n        }\n        if (arr.length === customerState.clients.length) {\n            dispatch(addCustomerR(client, customerState.tailors[0]))\n        }\n        else {\n            alert(\"You have already this user\")\n        }\n    }\n}\n\nexport function addCustomerR(customer: any, tailor: any) {\n    const promise = firebase.firestore().collection('Tailors').doc(tailor).collection('Customers').doc(customer).set({\n        measurmentId: customer + \" MEASURMENT\"\n    })\n    promise.then(() => {\n    })\n    promise.catch((err) => {\n        alert(err.message)\n    })\n    return {\n        type: \"Add_Client\",\n        customer,\n    }\n}\n\n\nexport function checkCustomerFirebase(client: any, customerState: any, dispatch: any) {\n    const arr = [];\n    if (customerState.clients.length > 0) {\n        customerState.clients.forEach((customer: any) => {\n            if (customer !== client) {\n                arr.push(\"yes\");\n            }\n        })\n    }\n    if (arr.length === customerState.clients.length) {\n        checkCustomer(client, customerState, dispatch);\n    }\n}\n\n\n\nexport const checkMeasurment = (client: any, measurment: any, dispatch: any, customerStateMeasurment: any) => {\n    if (client !== undefined) {\n        if (customerStateMeasurment.length > 0) {\n            customerStateMeasurment.forEach((customer: any, index: number) => {\n                if (customer[0] === client) {\n                    dispatch(updateMeasurmentR(client, measurment, index))\n                } else {\n                    dispatch(addMeasurmentR(client, measurment));\n                }\n            })\n        } else {\n            dispatch(addMeasurmentR(client, measurment))\n        }\n    }\n}\n\nexport const checkFirebaseMeasurment = (client: any, measurment: any, dispatch: any, customerStateMeasurment: any) => {\n    const arr = [];\n    if (customerStateMeasurment.length > 0) {\n        customerStateMeasurment.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerStateMeasurment.length) {\n        checkMeasurment(client, measurment, dispatch, customerStateMeasurment)\n    }\n}\n\nexport function addMeasurmentR(client: any, measurment: measurment) {\n    return {\n        type: \"Add_Measurment\",\n        client,\n        measurment\n    }\n}\n\nexport function updateMeasurmentR(client: any, measurment: measurment, index: number) {\n    return {\n        type: \"Update_Measurment\",\n        client,\n        index,\n        measurment\n    }\n}\n\ntype measurment = {\n    Length: number, Width: number, Neck: number, Waist: number, Middle: number, LegLenght: number,\n\n}\n\nexport function checkOrderFirebase(client: any, orders: string, customerState: any, dispatch: any) {\n    const arr = [];\n    if (customerState.orders.length > 0) {\n        customerState.orders.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerState.orders.length) {\n        checkOrder(client, orders, customerState, dispatch,)\n    }\n}\n\nexport function checkOrder(client: any, orders: string, customerState: any, dispatch: any) {\n    const arr = [];\n    if (customerState.orders.length > 0) {\n        customerState.orders.forEach((customer: any, index: number) => {\n            if (customer[0] === client) {\n                const order: number = parseInt(customer[1]) + parseInt(orders);\n                dispatch(updateOrder(client, index, order, customerState.tailors[0]));\n            } else {\n                arr.push(\"yes\");\n            }\n        })\n        if (arr.length === customerState.orders.length) {\n            dispatch(addOrder(client, orders, customerState.tailors[0]));\n        }\n    }\n    if (customerState.orders.length === 0) {\n        dispatch(addOrder(client, orders, customerState.tailors[0]));\n    }\n}\nexport function addOrder(client: any, orders: string, tailor: string) {\n    firebase.firestore().collection('Orders').doc(tailor).collection(\"Customer\").doc(client).set({\n        orders: parseInt(orders)\n    }).then().catch();\n    const order = parseInt(orders)\n    return {\n        type: \"Add_Order\",\n        client,\n        orders: order\n    }\n}\nexport function updateOrder(client: any, index: any, orders: number, tailor: any) {\n    firebase.firestore().collection('Orders').doc(tailor).collection(\"Customer\").doc(client).set({\n        orders: orders\n    }).then().catch();\n    return {\n        type: \"Update_Order\",\n        client,\n        orders,\n        index\n    }\n}\n\n\nexport function checkStitch(client: any, amount: any, customerState: any, dispatch: any) {\n    if (customerState.stitch.length > 0) {\n        customerState.stitch.forEach((customer: any, index: number) => {\n            if (client !== undefined && amount !== null) {\n                if (customer[0] === client) {\n                    dispatch(updateStitch(client, index, amount, customerState.tailors[0]));\n                }\n            }\n        })\n    }\n    else {\n        dispatch(addStitch(client, amount, customerState.tailors[0]))\n    }\n}\n\nexport function addStitch(client: any, amount: any, tailor: string) {\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"Sticthed\").doc(client).set({\n        sticthed: parseInt(amount)\n    }).then().catch();\n    return {\n        type: \"Add_Stitch\",\n        client,\n        amount\n    }\n}\n\nexport function updateStitch(client: any, index: any, amount: any, tailor: string) {\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"Sticthed\").doc(client).set({\n        sticthed: parseInt(amount)\n    }).then().catch();\n\n    return {\n        type: \"Update_Stitch\",\n        index,\n        amount\n    }\n}\n\n\n\n\nexport function checkDeliveredFirebase(client: any, amount: string, customerState: any, dispatch: any) {\n    const arr = [];\n    if (customerState.delivered.length > 0) {\n        customerState.delivered.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerState.delivered.length) {\n        checkDelivered(client, amount, customerState, dispatch,)\n    }\n}\n\nexport function checkDelivered(client: any, orders: string, customerState: any, dispatch: any) {\n    const tailor = customerState.tailors[0];\n    if (customerState.delivered.length > 0) {\n        customerState.delivered.forEach((customer: any, index: number) => {\n            if (customer[0] === client) {\n                dispatch(updateDelivered(client, index, orders, tailor));\n            }\n        })\n    }\n    else {\n        if (orders !== undefined) {\n            dispatch(addDelivered(client, orders, tailor))\n        }\n    }\n}\n\nexport function addDelivered(client: any, amount: any, tailor: string) {\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"Delivered\").doc(client).set({\n        delivered: parseInt(amount)\n    }).then().catch();\n    return {\n        type: \"Add_Delivered\",\n        client,\n        amount\n    }\n}\n\nexport function updateDelivered(client: any, index: any, amount: any, tailor: string) {\n    firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Delivered\").doc(client).set({\n        delivered: parseInt(amount)\n    }).then().catch();\n    return {\n        type: \"Update_Delivered\",\n        index,\n        amount\n    }\n}\n\nexport function checkUnStitchFirebase(client: any, amount: string, customerState: any, dispatch: any) {\n    const arr = [];\n    if (customerState.unStitch.length > 0) {\n        customerState.unStitch.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerState.unStitch.length) {\n        checkUnStitch(client, amount, customerState, dispatch,)\n    }\n}\n\n\nexport function checkUnStitch(client: any, amount: string, customerState: any, dispatch: any) {\n    if (customerState.unStitch.length > 0) {\n        customerState.unStitch.forEach((customer: any, index: number) => {\n            if (client !== undefined && amount !== null) {\n                if (customer[0] === client) {\n                    dispatch(updateUnstitched(client, index, amount, customerState.tailors[0]));\n                }\n            }\n        })\n    }\n    else {\n        if (amount !== undefined) {\n            dispatch(addUnstitched(client, amount, customerState.tailors[0]))\n        }\n    }\n}\n\nexport function addUnstitched(client: any, amount: any, tailor: string) {\n    firebase.firestore().collection('Tailor App').doc(tailor).collection(\"UnStitched\").doc(client).set({\n        unstitched: parseInt(amount)\n    }).then().catch();\n    return {\n        type: \"Add_UnStitched\",\n        client,\n        amount\n    }\n}\n\nexport function updateUnstitched(client: any, index: any, amount: any, tailor: string) {\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"UnStitched\").doc(client).set({\n        unstitched: parseInt(amount)\n    }).then().catch();\n    return {\n        type: \"Update_UnStitched\",\n        index,\n        amount\n    }\n}\n\n\nexport function checkLostFirebase(client: any, amount: string, customerState: any, dispatch: any) {\n    const tailor = customerState.tailors[0];\n    const arr = [];\n    if (customerState.lost.length > 0) {\n        customerState.lost.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerState.lost.length) {\n        checkLost(client, amount, customerState, dispatch,)\n    }\n}\n\n\nexport function checkLost(client: any, amount: string, customerState: any, dispatch: any) {\n    const tailor = customerState.tailors[0];\n    if (customerState.lost.length > 0) {\n        customerState.lost.forEach((customer: any, index: number) => {\n            if (client !== undefined && amount !== null) {\n                if (customer[0] === client) {\n                    dispatch(updateLost(tailor, client, index, amount));\n                }\n            }\n        })\n    }\n    else {\n        if (amount !== undefined && client !== undefined) {\n            dispatch(addLost(tailor, client, amount))\n        }\n    }\n}\n\nexport function addLost(tailor: any, client: any, amount: string) {\n\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"Losted\").doc(client).set({\n        losted: amount\n    }).then().catch();\n    return {\n        type: \"Add_Lost\",\n        client,\n        amount\n    }\n}\n\nexport function updateLost(tailor: any, client: any, index: any, amount: any) {\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"Losted\").doc(client).set({\n        losted: amount\n    }).then().catch();\n    return {\n        type: \"Update_Lost\",\n        index,\n        amount\n    }\n}\n\nexport function checkOutOfOrderFirebase(client: any, amount: string, customerState: any, dispatch: any) {\n    const arr = [];\n    if (customerState.outOfOrder.length > 0) {\n        customerState.outOfOrder.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerState.outOfOrder.length) {\n        checkLost(client, amount, customerState, dispatch,)\n    }\n}\n\nexport const deleteCustomer = (client: any, state: any) => {\n    let customerIndex;\n    let measurmentIndex;\n    let orderIndex;\n    let stitchIndex;\n    let deliveredIndex;\n    let unStitchIndex;\n    let lostIndex;\n    let outOfOrderIndex;\n    state.clients.forEach((customer: any, index: number) => {\n        if (client === customer) {\n            customerIndex = index;\n            deleteFromFirebase(client, state)\n        }\n    })\n    state.measurment.forEach((customer: any[], index: number) => {\n        if (client === customer[0]) {\n            measurmentIndex = index;\n        }\n    })\n    state.orders.forEach((customer: any[], index: number) => {\n        if (client === customer[0]) {\n            orderIndex = index;\n        }\n    })\n    state.stitch.forEach((customer: any[], index: number) => {\n        if (client === customer[0]) {\n            stitchIndex = index;\n        }\n    })\n    state.delivered.forEach((customer: any[], index: number) => {\n        if (client === customer[0]) {\n            deliveredIndex = index;\n        }\n    })\n    state.unStitch.forEach((customer: any[], index: number) => {\n        if (client === customer[0]) {\n            unStitchIndex = index;\n        }\n    })\n    state.lost.forEach((customer: any[], index: number) => {\n        if (client === customer[0]) {\n            lostIndex = index;\n        }\n    })\n    state.outOfOrder.forEach((customer: any[], index: number) => {\n        if (client === customer[0]) {\n            outOfOrderIndex = index;\n        }\n    })\n    return {\n        type: \"Delete_Client\",\n        customerIndex,\n        measurmentIndex,\n        orderIndex\n    }\n\n}\n\nexport const deleteFromFirebase = (customer: any, state: any) => {\n    const tailor = state.tailors[0];\n    firebase.firestore().collection('Tailors').doc(tailor).collection('Customers').doc(customer).\n        delete();\n    firebase.firestore().collection('Measurments').doc(tailor).collection(\"Customer\").doc(customer).\n        delete();\n    firebase.firestore().collection('Orders').doc(tailor).collection(\"Customer\").doc(customer).\n        delete();\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"Delivered\").doc(customer).\n        delete();\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"Losted\").doc(customer).\n        delete();\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"OutOfOrder\").doc(customer).\n        delete();\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"Sticthed\").doc(customer).\n        delete();\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"UnStitched\").doc(customer).\n        delete();\n}\n\nexport function checkOutOfOrder(client: any, amount: string, customerState: any, dispatch: any) {\n    const tailor = customerState.tailors[0];\n    if (customerState.outOfOrder.length > 0) {\n        customerState.outOfOrder.forEach((customer: any, index: number) => {\n            if (client !== undefined && amount !== null) {\n                if (customer[0] === client) {\n                    dispatch(updateOutOfOrder(client, index, amount, tailor));\n\n                }\n            }\n        })\n    }\n    else {\n        if (amount !== undefined && client !== undefined) {\n            dispatch(addOutOfOrder(client, amount, tailor))\n        }\n    }\n}\n\nexport function addOutOfOrder(client: any, amount: string, tailor: any) {\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"OutOfOrder\").doc(client).set({\n        OutOfOrder: parseInt(amount)\n    }).then().catch();\n    return {\n        type: \"Add_OutOfOrder\",\n        client,\n        amount\n    }\n}\nexport function updateOutOfOrder(client: any, index: any, amount: any, tailor: any) {\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"OutOfOrder\").doc(client).set({\n        OutOfOrder: parseInt(amount)\n    }).then().catch();\n    return {\n        type: \"Update_OutOfOrder\",\n        index: index,\n        amount\n    }\n}\n\nexport const addClient = (customer: any) => {\n    return {\n        type: \"Add_Customer\",\n        customer\n    }\n}\n\nexport const deleteClient = () => {\n    return {\n        type: \"Delete_Customer\",\n    }\n}","/home/faiza/Documents/Git Hub/tailor_app/src/components/AddMeasurment.tsx",["117","118","119"],"import React from 'react';\nimport firebase from 'firebase';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { checkFirebaseMeasurment, checkMeasurment } from './index';\nimport { history } from './history';\nimport { AlreadyMeasurment } from './AlreadyMeasurment';\nimport { deleteClient } from './store';\nexport function Measurment() {\n    const customerState = useSelector((state: any) => state);\n    const client: any = customerState.customer[0];\n    const tailor: any = customerState.tailors[0];\n    const dispatch = useDispatch();\n    const promise = () => {\n        firebase.firestore().collection('Measurments').doc(tailor).collection(\"Customer\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const measurment = client.data().measurmentEle;\n                    checkFirebaseMeasurment(clientName, measurment, dispatch, customerState.measurment);\n                })\n            }).catch()\n    }\n    promise();\n\n    const saveMeasurment: any = (e: any) => {\n        e.preventDefault();\n\n        const [Length, Width, Neck, Chest, Waist, Bust, ArmLenght, ShoulderLenght, LegLenght] = e.target;\n        const measurmentEle = {\n            Length: Length.value, Width: Width.value, Chest: Chest.value, Waist: Waist.value, Neck: Neck.value, ArmLenght: ArmLenght.value, Shoulder: ShoulderLenght.value, LegLenght: LegLenght.value,\n        }\n\n        firebase.database().ref().on(\"child_added\", snap => {\n            const promise = firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Measurment\").doc(client).set({\n                measurmentEle\n            });\n            promise.then(() => {\n                alert(\"Data is updated\");\n                checkMeasurment(client, measurmentEle, dispatch, customerState.measurment);\n                history.push(\"/Measurment\");\n                history.replace(\"/Measurment\");\n            })\n            promise.catch((err) => {\n                alert(err.message)\n            })\n        });\n    }\n\n    let arr = [];\n    return (\n        <div>\n            {customerState.measurment.length > 0 ?\n                customerState.measurment.map((measurment: any[], index: number) => {\n                    if (measurment[0] === client) {\n                        return (<AlreadyMeasurment />)\n                    } else { arr.push(\"yes\") }\n                })\n                : <AddMeasurment />\n            }\n            { customerState.measurment.length > 0 ?\n                arr.length === customerState.measurment.length ?\n                    <AddMeasurment />\n                    : null\n                : null\n            }\n\n        </div>\n    )\n}\n\n\n\nexport const AddMeasurment = () => {\n    const dispatch = useDispatch();\n    const customerState = useSelector((state: any) => state);\n    const tailor = customerState.tailors[0];\n    const client = customerState.customer[0];\n    const promise = () => {\n        firebase.firestore().collection('Measurments').doc(tailor).collection(\"Customer\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const measurment = client.data().measurmentEle;\n                    checkFirebaseMeasurment(clientName, measurment, dispatch, customerState.measurment);\n                })\n            }).catch()\n    }\n    promise();\n\n    const saveMeasurment: any = (e: any) => {\n        e.preventDefault();\n\n        const [Length, Width, Neck, Chest, Waist, Bust, ArmLenght, ShoulderLenght, LegLenght] = e.target;\n        const measurmentEle = {\n            Length: Length.value, Width: Width.value, Chest: Chest.value, Bust: Bust.value, Waist: Waist.value, Neck: Neck.value, ArmLenght: ArmLenght.value, Shoulder: ShoulderLenght.value, LegLenght: LegLenght.value\n        }\n        const promise = firebase.firestore().collection('Measurments').doc(tailor).collection(\"Customer\").doc(client).set({\n            measurmentEle\n        });\n        promise.then(() => {\n            checkMeasurment(client, measurmentEle, dispatch, customerState.measurment);\n            history.push(\"/DashBoard\");\n            history.replace(\"/DashBoard\");\n            dispatch(deleteClient());\n        })\n        promise.catch((err) => {\n            alert(err.message);\n            dispatch(deleteClient());\n        })\n    }\n\n    return (<div>\n        {\n            customerState.clients.length > 0 ?\n                <div className=\"measurment\">\n                    <h1 className=\"h1 text-muted\">Measurment</h1>\n                    <form className=\"mr-5 \" onSubmit={saveMeasurment}>\n                        <div className=\"EditM\"></div>\n                        <input className=\"form-control\" type=\"number\" placeholder=\"Length\" required />\n                        <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Width\" required />\n                        <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Neck\" required />\n                        <div className=\"EditM\"></div>\n                        <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Waist\" required />\n                        <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Bust\" required />\n                        <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Arm Width\" required />\n                        <div className=\"EditM\"></div>\n                        <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Waist\" required />\n                        <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Chest\" required />\n                        <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Shoulder Width\" required />\n                        <button className=\"btn btn-outline-success d-inline w-25\" type=\"submit\">Add</button>\n                        <button className=\"btn btn-outline-danger d-inline w-50\" type=\"button\" onClick={() => { history.push(\"/DashBoard\"); history.replace('/DashBoard') }}>Cancle</button>\n                    </form>\n                </div> :\n                <div>\n                    <h1 className=\"h1 font-italic text-muted\">\n                        Please login first\n                         </h1>\n                    <button className=\"btn btn-outline-danger\" onClick={\n                        () => {\n                            history.push('/SignIn')\n                            history.replace('/SignIn')\n                        }\n                    }>\n                        Go to Sign In\n                         </button>\n                    <button className=\"btn btn-outline-success\" onClick={\n                        () => {\n                            history.push('/SignUp')\n                            history.replace('/SignUp')\n                        }\n                    }>\n                        Go to Sign Up\n                         </button>\n                </div>\n        }\n    </div>\n    )\n}\n","/home/faiza/Documents/Git Hub/tailor_app/src/components/NotFound.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/EditMeasurment.tsx",["120","121"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/index.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/AddOrder.tsx",["122"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/SignIn.tsx",[],{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":2,"column":8,"nodeType":"129","messageId":"130","endLine":2,"endColumn":16},{"ruleId":"123","replacedBy":"131"},{"ruleId":"125","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":8,"column":68,"nodeType":"135","messageId":"136","endLine":8,"endColumn":70},{"ruleId":"127","severity":1,"message":"137","line":4,"column":106,"nodeType":"129","messageId":"130","endLine":4,"endColumn":115},{"ruleId":"127","severity":1,"message":"138","line":4,"column":117,"nodeType":"129","messageId":"130","endLine":4,"endColumn":140},{"ruleId":"133","severity":1,"message":"134","line":61,"column":85,"nodeType":"135","messageId":"136","endLine":61,"endColumn":87},{"ruleId":"133","severity":1,"message":"134","line":73,"column":89,"nodeType":"135","messageId":"136","endLine":73,"endColumn":91},{"ruleId":"133","severity":1,"message":"134","line":85,"column":89,"nodeType":"135","messageId":"136","endLine":85,"endColumn":91},{"ruleId":"133","severity":1,"message":"134","line":100,"column":81,"nodeType":"135","messageId":"136","endLine":100,"endColumn":83},{"ruleId":"133","severity":1,"message":"134","line":112,"column":91,"nodeType":"135","messageId":"136","endLine":112,"endColumn":93},{"ruleId":"127","severity":1,"message":"139","line":22,"column":11,"nodeType":"129","messageId":"130","endLine":22,"endColumn":30},{"ruleId":"133","severity":1,"message":"134","line":48,"column":79,"nodeType":"135","messageId":"136","endLine":48,"endColumn":81},{"ruleId":"123","replacedBy":"140"},{"ruleId":"125","replacedBy":"141"},{"ruleId":"127","severity":1,"message":"142","line":338,"column":11,"nodeType":"129","messageId":"130","endLine":338,"endColumn":17},{"ruleId":"127","severity":1,"message":"143","line":439,"column":13,"nodeType":"129","messageId":"130","endLine":439,"endColumn":24},{"ruleId":"127","severity":1,"message":"144","line":444,"column":13,"nodeType":"129","messageId":"130","endLine":444,"endColumn":27},{"ruleId":"127","severity":1,"message":"145","line":449,"column":13,"nodeType":"129","messageId":"130","endLine":449,"endColumn":26},{"ruleId":"127","severity":1,"message":"146","line":454,"column":13,"nodeType":"129","messageId":"130","endLine":454,"endColumn":22},{"ruleId":"127","severity":1,"message":"147","line":459,"column":13,"nodeType":"129","messageId":"130","endLine":459,"endColumn":28},{"ruleId":"148","severity":1,"message":"149","line":473,"column":97,"nodeType":"150","messageId":"151","endLine":473,"endColumn":98,"fix":"152"},{"ruleId":"148","severity":1,"message":"149","line":475,"column":100,"nodeType":"150","messageId":"151","endLine":475,"endColumn":101,"fix":"153"},{"ruleId":"148","severity":1,"message":"149","line":477,"column":95,"nodeType":"150","messageId":"151","endLine":477,"endColumn":96,"fix":"154"},{"ruleId":"148","severity":1,"message":"149","line":479,"column":99,"nodeType":"150","messageId":"151","endLine":479,"endColumn":100,"fix":"155"},{"ruleId":"148","severity":1,"message":"149","line":481,"column":96,"nodeType":"150","messageId":"151","endLine":481,"endColumn":97,"fix":"156"},{"ruleId":"148","severity":1,"message":"149","line":483,"column":100,"nodeType":"150","messageId":"151","endLine":483,"endColumn":101,"fix":"157"},{"ruleId":"148","severity":1,"message":"149","line":485,"column":98,"nodeType":"150","messageId":"151","endLine":485,"endColumn":99,"fix":"158"},{"ruleId":"148","severity":1,"message":"149","line":487,"column":100,"nodeType":"150","messageId":"151","endLine":487,"endColumn":101,"fix":"159"},{"ruleId":"127","severity":1,"message":"139","line":25,"column":11,"nodeType":"129","messageId":"130","endLine":25,"endColumn":30},{"ruleId":"127","severity":1,"message":"160","line":28,"column":51,"nodeType":"129","messageId":"130","endLine":28,"endColumn":55},{"ruleId":"133","severity":1,"message":"134","line":53,"column":81,"nodeType":"135","messageId":"136","endLine":53,"endColumn":83},{"ruleId":"133","severity":1,"message":"161","line":15,"column":71,"nodeType":"135","messageId":"162","endLine":15,"endColumn":73},{"ruleId":"133","severity":1,"message":"134","line":47,"column":83,"nodeType":"135","messageId":"136","endLine":47,"endColumn":85},{"ruleId":"133","severity":1,"message":"134","line":27,"column":68,"nodeType":"135","messageId":"136","endLine":27,"endColumn":70},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],"@typescript-eslint/no-unused-vars","'firebase' is defined but never used.","Identifier","unusedVar",["163"],["164"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'checkLost' is defined but never used.","'checkOutOfOrderFirebase' is defined but never used.","'saveMeasurment' is assigned a value but never used.",["163"],["164"],"'tailor' is assigned a value but never used.","'stitchIndex' is assigned a value but never used.","'deliveredIndex' is assigned a value but never used.","'unStitchIndex' is assigned a value but never used.","'lostIndex' is assigned a value but never used.","'outOfOrderIndex' is assigned a value but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"165","text":"166"},{"range":"167","text":"166"},{"range":"168","text":"166"},{"range":"169","text":"166"},{"range":"170","text":"166"},{"range":"171","text":"166"},{"range":"172","text":"166"},{"range":"173","text":"166"},"'Bust' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-global-assign","no-unsafe-negation",[14442,14452],"\n        .",[14561,14571],[14675,14685],[14793,14803],[14908,14918],[15027,15037],[15144,15154],[15263,15273]]