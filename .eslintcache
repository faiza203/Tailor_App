[{"/home/faiza/Documents/Git Hub/tailor_app/src/index.tsx":"1","/home/faiza/Documents/Git Hub/tailor_app/src/components/index.tsx":"2","/home/faiza/Documents/Git Hub/tailor_app/src/components/Home.tsx":"3","/home/faiza/Documents/Git Hub/tailor_app/src/components/SignIn.tsx":"4","/home/faiza/Documents/Git Hub/tailor_app/src/components/firebase.tsx":"5","/home/faiza/Documents/Git Hub/tailor_app/src/components/NotFound.tsx":"6","/home/faiza/Documents/Git Hub/tailor_app/src/components/AddMeasurment.tsx":"7","/home/faiza/Documents/Git Hub/tailor_app/src/components/history.tsx":"8","/home/faiza/Documents/Git Hub/tailor_app/src/components/store.tsx":"9","/home/faiza/Documents/Git Hub/tailor_app/src/components/SignUp.tsx":"10","/home/faiza/Documents/Git Hub/tailor_app/src/components/Customers.tsx":"11","/home/faiza/Documents/Git Hub/tailor_app/src/components/DashBoard.tsx":"12","/home/faiza/Documents/Git Hub/tailor_app/src/components/reducer.tsx":"13","/home/faiza/Documents/Git Hub/tailor_app/src/App.tsx":"14","/home/faiza/Documents/Git Hub/tailor_app/src/components/AddDetail.tsx":"15","/home/faiza/Documents/Git Hub/tailor_app/src/components/AddOrder.tsx":"16","/home/faiza/Documents/Git Hub/tailor_app/src/components/AlreadyMeasurment.tsx":"17","/home/faiza/Documents/Git Hub/tailor_app/src/components/Condition.tsx":"18","/home/faiza/Documents/Git Hub/tailor_app/src/components/alreadyCondition.tsx":"19","/home/faiza/Documents/Git Hub/tailor_app/src/components/EditMeasurment.tsx":"20"},{"size":330,"mtime":1606992343000,"results":"21","hashOfConfig":"22"},{"size":937,"mtime":1607863654481,"results":"23","hashOfConfig":"22"},{"size":656,"mtime":1606992343000,"results":"24","hashOfConfig":"25"},{"size":1598,"mtime":1607930500532,"results":"26","hashOfConfig":"22"},{"size":562,"mtime":1606992343000,"results":"27","hashOfConfig":"22"},{"size":595,"mtime":1607251724440,"results":"28","hashOfConfig":"25"},{"size":7099,"mtime":1608107758589,"results":"29","hashOfConfig":"22"},{"size":95,"mtime":1607326904207,"results":"30","hashOfConfig":"22"},{"size":16007,"mtime":1608107537203,"results":"31","hashOfConfig":"22"},{"size":2503,"mtime":1607930057588,"results":"32","hashOfConfig":"22"},{"size":1876,"mtime":1607934009757,"results":"33","hashOfConfig":"22"},{"size":2175,"mtime":1607925159349,"results":"34","hashOfConfig":"22"},{"size":3869,"mtime":1608018747846,"results":"35","hashOfConfig":"22"},{"size":975,"mtime":1607760005743,"results":"36","hashOfConfig":"22"},{"size":4175,"mtime":1608097802829,"results":"37","hashOfConfig":"22"},{"size":1462,"mtime":1608038933430,"results":"38","hashOfConfig":"22"},{"size":5046,"mtime":1608107926654,"results":"39","hashOfConfig":"22"},{"size":1274,"mtime":1608025796016,"results":"40","hashOfConfig":"22"},{"size":6018,"mtime":1608025832766,"results":"41","hashOfConfig":"22"},{"size":7246,"mtime":1608107973251,"results":"42","hashOfConfig":"22"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ytme69",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"34fyjp",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"47"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"53"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"64"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},"/home/faiza/Documents/Git Hub/tailor_app/src/index.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/index.tsx",[],["95","96"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/Home.tsx",[],["97","98"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/SignIn.tsx",[],["99","100"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/firebase.tsx",[],["101","102"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/NotFound.tsx",[],["103","104"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/AddMeasurment.tsx",["105","106","107"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/history.tsx",[],["108","109"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/store.tsx",["110","111","112","113"],"import { createStore } from 'redux';\nimport TailorReducer from './reducer';\nimport firebase from 'firebase';\nexport const store = createStore(TailorReducer);\nexport function addTailor(tailor: any) {\n    return {\n        type: \"Add_Tailor\",\n        tailor\n    }\n}\n\nexport const checkCustomer = (client: any, customerState: any, dispatch: any) => {\n    let arr = [];\n    if (client.trim() === \"\") {\n        alert(\"Please add a value\")\n    } else {\n        if (customerState.clients.length > 0) {\n            customerState.clients.forEach((customer: any) => {\n                if (customer !== client) {\n                    arr.push(\"yes\");\n                }\n            })\n        }\n        if (arr.length === customerState.clients.length) {\n            dispatch(addCustomerR(client, customerState.tailors[0]))\n        }\n        else {\n            alert(\"You have already this user\")\n        }\n    }\n}\n\nexport function addCustomerR(customer: any, tailor: any) {\n    const promise = firebase.firestore().collection('Tailors').doc(tailor).collection('Customers').doc(customer).set({\n        measurmentId: customer + \" MEASURMENT\"\n    })\n    promise.then(() => {\n    })\n    promise.catch((err) => {\n        alert(err.message)\n    })\n    return {\n        type: \"Add_Client\",\n        customer,\n    }\n}\n\n\nexport function checkCustomerFirebase(client: any, customerState: any, dispatch: any) {\n    const arr = [];\n    if (customerState.clients.length > 0) {\n        customerState.clients.forEach((customer: any) => {\n            if (customer !== client) {\n                arr.push(\"yes\");\n            }\n        })\n    }\n    if (arr.length === customerState.clients.length) {\n        checkCustomer(client, customerState, dispatch);\n    }\n}\n\n\n\nexport const checkMeasurment = (tailor: any, client: any, measurment: any, dispatch: any, customerStateMeasurment: any) => {\n    if (client !== undefined) {\n        if (customerStateMeasurment.length > 0) {\n            customerStateMeasurment.forEach((customer: any, index: number) => {\n                if (customer[0] === client) {\n                    dispatch(updateMeasurmentR(tailor, client, measurment, index))\n                } else {\n                    dispatch(addMeasurmentR(tailor, client, measurment));\n                }\n            })\n        } else {\n            dispatch(addMeasurmentR(tailor, client, measurment))\n        }\n    }\n}\n\nexport const checkFirebaseMeasurment = (tailor: any, client: any, measurment: any, dispatch: any, customerStateMeasurment: any) => {\n    const arr = [];\n    if (customerStateMeasurment.length > 0) {\n        customerStateMeasurment.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerStateMeasurment.length) {\n        checkMeasurment(tailor, client, measurment, dispatch, customerStateMeasurment)\n    }\n}\n\nexport function addMeasurmentR(tailor: any, client: any, measurment: measurment) {\n\n    firebase.database().ref().on(\"child_added\", snap => {\n        const promise = firebase.firestore().collection('Measurment').doc(tailor).collection(\"Customers\").doc(client).set({\n            measurment\n        });\n        promise.then(() => {\n        })\n        promise.catch((err) => {\n            console.log(err.meassage);\n\n        })\n    });\n\n    return {\n        type: \"Add_Measurment\",\n        client,\n        measurment\n    }\n}\n\nexport function updateMeasurmentR(tailor: any, client: any, measurment: measurment, index: number) {\n\n    firebase.database().ref().on(\"child_added\", snap => {\n        const promise = firebase.firestore().collection('Measurment').doc(tailor).collection(\"Customers\").doc(client).set({\n            measurment\n        });\n        promise.then(() => {\n        })\n        promise.catch((err) => {\n            console.log(err.meassage);\n\n        })\n    });\n    return {\n        type: \"Update_Measurment\",\n        client,\n        index,\n        measurment\n    }\n}\n\ntype measurment = {\n    Length: number, Width: number, Neck: number, Waist: number, Middle: number, LegLenght: number,\n\n}\n\nexport function checkOrderFirebase(client: any, orders: string, customerState: any, dispatch: any) {\n    const arr = [];\n    if (customerState.orders.length > 0) {\n        customerState.orders.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerState.orders.length) {\n        checkOrder(client, orders, customerState, dispatch,)\n    }\n}\n\nexport function checkOrder(client: any, orders: string, customerState: any, dispatch: any) {\n    const arr = [];\n    if (customerState.orders.length > 0) {\n        customerState.orders.forEach((customer: any, index: number) => {\n            if (customer[0] === client) {\n                const order: number = parseInt(customer[1]) + parseInt(orders);\n                dispatch(updateOrder(client, index, order, customerState.tailors[0]));\n            } else {\n                arr.push(\"yes\");\n            }\n        })\n        if (arr.length === customerState.orders.length) {\n            dispatch(addOrder(client, orders, customerState.tailors[0]));\n        }\n    }\n    if (customerState.orders.length === 0) {\n        dispatch(addOrder(client, orders, customerState.tailors[0]));\n    }\n}\nexport function addOrder(client: any, orders: string, tailor: string) {\n    firebase.firestore().collection('Orders').doc(tailor).collection(\"Customer\").doc(client).set({\n        orders: parseInt(orders)\n    }).then().catch();\n    const order = parseInt(orders)\n    return {\n        type: \"Add_Order\",\n        client,\n        orders: order\n    }\n}\nexport function updateOrder(client: any, index: any, orders: number, tailor: any) {\n    firebase.firestore().collection('Orders').doc(tailor).collection(\"Customer\").doc(client).set({\n        orders: orders\n    }).then().catch();\n    return {\n        type: \"Update_Order\",\n        client,\n        orders,\n        index\n    }\n}\n\n\nexport function checkStitch(client: any, amount: any, customerState: any, dispatch: any) {\n    if (customerState.stitch.length > 0) {\n        customerState.stitch.forEach((customer: any, index: number) => {\n            if (client !== undefined && amount !== null) {\n                if (customer[0] === client) {\n                    dispatch(updateStitch(client, index, amount, customerState.tailors[0]));\n                }\n            }\n        })\n    }\n    else {\n        dispatch(addStitch(client, amount, customerState.tailors[0]))\n    }\n}\n\nexport function addStitch(client: any, amount: any, tailor: string) {\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"Sticthed\").doc(client).set({\n        sticthed: parseInt(amount)\n    }).then().catch();\n    return {\n        type: \"Add_Stitch\",\n        client,\n        amount\n    }\n}\n\nexport function updateStitch(client: any, index: any, amount: any, tailor: string) {\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"Sticthed\").doc(client).set({\n        sticthed: parseInt(amount)\n    }).then().catch();\n\n    return {\n        type: \"Update_Stitch\",\n        index,\n        amount\n    }\n}\n\n\n\n\nexport function checkDeliveredFirebase(client: any, amount: string, customerState: any, dispatch: any) {\n    const arr = [];\n    if (customerState.delivered.length > 0) {\n        customerState.delivered.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerState.delivered.length) {\n        checkDelivered(client, amount, customerState, dispatch,)\n    }\n}\n\nexport function checkDelivered(client: any, orders: string, customerState: any, dispatch: any) {\n    const tailor = customerState.tailors[0];\n    if (customerState.delivered.length > 0) {\n        customerState.delivered.forEach((customer: any, index: number) => {\n            if (customer[0] === client) {\n                dispatch(updateDelivered(client, index, orders, tailor));\n            }\n        })\n    }\n    else {\n        if (orders !== undefined) {\n            dispatch(addDelivered(client, orders, tailor))\n        }\n    }\n}\n\nexport function addDelivered(client: any, amount: any, tailor: string) {\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"Delivered\").doc(client).set({\n        delivered: parseInt(amount)\n    }).then().catch();\n    return {\n        type: \"Add_Delivered\",\n        client,\n        amount\n    }\n}\n\nexport function updateDelivered(client: any, index: any, amount: any, tailor: string) {\n    firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Delivered\").doc(client).set({\n        delivered: parseInt(amount)\n    }).then().catch();\n    return {\n        type: \"Update_Delivered\",\n        index,\n        amount\n    }\n}\n\nexport function checkUnStitchFirebase(client: any, amount: string, customerState: any, dispatch: any) {\n    const arr = [];\n    if (customerState.unStitch.length > 0) {\n        customerState.unStitch.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerState.unStitch.length) {\n        checkUnStitch(client, amount, customerState, dispatch,)\n    }\n}\n\n\nexport function checkUnStitch(client: any, amount: string, customerState: any, dispatch: any) {\n    if (customerState.unStitch.length > 0) {\n        customerState.unStitch.forEach((customer: any, index: number) => {\n            if (client !== undefined && amount !== null) {\n                if (customer[0] === client) {\n                    dispatch(updateUnstitched(client, index, amount, customerState.tailors[0]));\n                }\n            }\n        })\n    }\n    else {\n        if (amount !== undefined) {\n            dispatch(addUnstitched(client, amount, customerState.tailors[0]))\n        }\n    }\n}\n\nexport function addUnstitched(client: any, amount: any, tailor: string) {\n    firebase.firestore().collection('Tailor App').doc(tailor).collection(\"UnStitched\").doc(client).set({\n        unstitched: parseInt(amount)\n    }).then().catch();\n    return {\n        type: \"Add_UnStitched\",\n        client,\n        amount\n    }\n}\n\nexport function updateUnstitched(client: any, index: any, amount: any, tailor: string) {\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"UnStitched\").doc(client).set({\n        unstitched: parseInt(amount)\n    }).then().catch();\n    return {\n        type: \"Update_UnStitched\",\n        index,\n        amount\n    }\n}\n\n\nexport function checkLostFirebase(client: any, amount: string, customerState: any, dispatch: any) {\n    const tailor = customerState.tailors[0];\n    const arr = [];\n    if (customerState.lost.length > 0) {\n        customerState.lost.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerState.lost.length) {\n        checkLost(client, amount, customerState, dispatch,)\n    }\n}\n\n\nexport function checkLost(client: any, amount: string, customerState: any, dispatch: any) {\n    const tailor = customerState.tailors[0];\n    if (customerState.lost.length > 0) {\n        customerState.lost.forEach((customer: any, index: number) => {\n            if (client !== undefined && amount !== null) {\n                if (customer[0] === client) {\n                    dispatch(updateLost(tailor, client, index, amount));\n                }\n            }\n        })\n    }\n    else {\n        if (amount !== undefined && client !== undefined) {\n            dispatch(addLost(tailor, client, amount))\n        }\n    }\n}\n\nexport function addLost(tailor: any, client: any, amount: string) {\n\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"Losted\").doc(client).set({\n        losted: amount\n    }).then().catch();\n    return {\n        type: \"Add_Lost\",\n        client,\n        amount\n    }\n}\n\nexport function updateLost(tailor: any, client: any, index: any, amount: any) {\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"Losted\").doc(client).set({\n        losted: amount\n    }).then().catch();\n    return {\n        type: \"Update_Lost\",\n        index,\n        amount\n    }\n}\n\nexport function checkOutOfOrderFirebase(client: any, amount: string, customerState: any, dispatch: any) {\n    const arr = [];\n    if (customerState.outOfOrder.length > 0) {\n        customerState.outOfOrder.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerState.outOfOrder.length) {\n        checkLost(client, amount, customerState, dispatch,)\n    }\n}\n\nexport const deleteCustomer = (client: any, state: any) => {\n    let customerIndex;\n    let measurmentIndex;\n    let orderIndex;\n    state.clients.forEach((customer: any, index: number) => {\n        if (client === customer) {\n            customerIndex = index;\n            deleteFromFirebase(client, state)\n        }\n    })\n    state.measurment.forEach((customer: any[], index: number) => {\n        if (client === customer[0]) {\n            measurmentIndex = index;\n        }\n    })\n    state.orders.forEach((customer: any[], index: number) => {\n        if (client === customer[0]) {\n            orderIndex = index;\n        }\n    })\n    return {\n        type: \"Delete_Client\",\n        customerIndex,\n        measurmentIndex,\n        orderIndex\n    }\n\n}\n\nexport const deleteFromFirebase = (customer: any, state: any) => {\n    const tailor = state.tailors[0];\n    firebase.firestore().collection('Tailors').doc(tailor).collection('Customers').doc(customer).\n        delete();\n    firebase.firestore().collection('Measurments').doc(tailor).collection(\"Customer\").doc(customer).\n        delete();\n    firebase.firestore().collection('Orders').doc(tailor).collection(\"Customer\").doc(customer).\n        delete();\n}\n\nexport function checkOutOfOrder(client: any, amount: string, customerState: any, dispatch: any) {\n    const tailor = customerState.tailors[0];\n    if (customerState.outOfOrder.length > 0) {\n        customerState.outOfOrder.forEach((customer: any, index: number) => {\n            if (client !== undefined && amount !== null) {\n                if (customer[0] === client) {\n                    dispatch(updateOutOfOrder(client, index, amount, tailor));\n\n                }\n            }\n        })\n    }\n    else {\n        if (amount !== undefined && client !== undefined) {\n            dispatch(addOutOfOrder(client, amount, tailor))\n        }\n    }\n}\n\nexport function addOutOfOrder(client: any, amount: string, tailor: any) {\n\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"OutOfOrder\").doc(client).set({\n        OutOfOrder: parseInt(amount)\n    }).then().catch();\n    return {\n        type: \"Add_OutOfOrder\",\n        client,\n        amount\n    }\n}\nexport function updateOutOfOrder(client: any, index: any, amount: any, tailor: any) {\n    firebase.firestore().collection('Tailor App').doc(tailor).collection(\"OutOfOrder\").doc(client).set({\n        OutOfOrder: parseInt(amount)\n    }).then().catch();\n    return {\n        type: \"Update_OutOfOrder\",\n        index: index,\n        amount\n    }\n}\n\nexport const addClient = (customer: any) => {\n    return {\n        type: \"Add_Customer\",\n        customer\n    }\n}\n\nexport const deleteClient = () => {\n    return {\n        type: \"Delete_Customer\",\n    }\n}","/home/faiza/Documents/Git Hub/tailor_app/src/components/SignUp.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/Customers.tsx",["114"],"import { useSelector } from 'react-redux';\nimport firebase from 'firebase';\nimport { history } from './index';\nimport { useDispatch } from 'react-redux';\nimport { addClient, deleteClient, deleteCustomer } from \"./store\";\n\n\nexport const Customers = (props: any) => {\n    const customerState = useSelector((state: any) => state);\n    const dispatch = useDispatch();\n\n    return (\n        <div>\n            {\n                customerState.clients.length > 0 ?\n                    customerState.clients.map((customer: any, index: number) => {\n                        return (<div key={index} className=\"mt-1  text-right mr-5\">\n                            <h3 className=\"h3 text-muted d-inline mt-2\">{customer}</h3>\n                            <button id={customer + \"measurment\"} className=\"btn btn-outline-success d-inline m-2 \" onClick={() => {\n                                dispatch(addClient(customer));\n                                history.push(\"/Measurment\");\n                                history.replace(\"/Measurment\");\n                            }}>Measurment</button>\n                            <button id={customer + \"orders\"} className=\"btn btn-outline-danger d-inline m-1\" onClick={() => {\n                                dispatch(addClient(customer));\n                                history.push(\"/Orders\");\n                                history.replace(\"/Orders\");\n                            }}>Orders</button>\n                            <button id={customer + \"delete\"} className=\"btn btn-outline-primary d-inline m-1 mr-5\" onClick={() => {\n                                dispatch(deleteCustomer(customer, customerState));\n                                dispatch(deleteClient());\n                            }}>Delete</button>\n                        </div>)\n                    }) :\n                    null\n            }\n        </div>\n    );\n};\n","/home/faiza/Documents/Git Hub/tailor_app/src/components/DashBoard.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/reducer.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/App.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/AddDetail.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/AddOrder.tsx",["115"],"import React from 'react';\nimport firebase from 'firebase';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { checkOrderFirebase } from './index';\nexport const AddOrder = () => {\n    const dispatch = useDispatch();\n    const customerState = useSelector((state: any) => state);\n    const client: any = customerState.customer[0];\n    const tailor: any = customerState.tailors[0];\n    const promise = () => {\n        firebase.firestore().collection('Orders').doc(tailor).collection(\"Customer\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(clients => {\n                    const clientName = clients.id;\n                    const orders = clients.data().orders;\n                    checkOrderFirebase(clientName, orders, customerState, dispatch)\n                })\n            });\n    }\n    promise();\n\n    return (<div>\n        <h1 className=\"h1 text-muted\">Orders</h1>\n        <p className=\"text-muted\">If you want to stitch new dress: </p>\n        <input className=\"d-inline\" type=\"number\" placeholder=\"Add Orders\" />\n        {customerState.orders.length > 0 ?\n            customerState.orders.map((order: any[], index: number) => {\n                if (order[0].toUpperCase() === client) {\n                    return (\n                        <p key={index} className=\"text-muted mt-1\">Already Orders are {order[1]}</p>\n                    )\n                }\n            }) :\n            null\n        }\n    </div>)\n}","/home/faiza/Documents/Git Hub/tailor_app/src/components/AlreadyMeasurment.tsx",["116","117"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/Condition.tsx",["118"],"import { useSelector } from 'react-redux';\n\nexport const Condition = () => {\n    const customerState = useSelector((state: any) => state);\n    const client: any = customerState.customer[0];\n    return (<div id=\" Condition\">\n        {customerState.orders.length > 0 ?\n            customerState.orders.map((order: any[], index: number) => {\n                if (order[0].toUpperCase() === client) {\n                    return (\n                        <div className=\"condition ml-5\" key={index}>\n                            <h1 className=\"h1 text-muted\">Condition</h1>\n                            <p className=\"text-muted\">If you want to  add   Condition : </p>\n                            <input type=\"number\" placeholder=\" Stitched  \" />\n                            <input className=\" mt-1 \" type=\"number\" placeholder=\" Delivered  \" />\n                            <input className=\" mt-1 \" type=\"number\" placeholder=\" Un Stitched  \" />\n                            <input className=\" mt-1 \" type=\"number\" placeholder=\" Lost  \" />\n                            <input className=\" mt-1 \" type=\"number\" placeholder=\" Out of Order Stitched  \" />\n                        </div>\n                    )\n                }\n            }) :\n            null\n        }\n\n    </div>\n    )\n}\n","/home/faiza/Documents/Git Hub/tailor_app/src/components/alreadyCondition.tsx",["119","120","121","122","123","124","125"],"import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport firebase from 'firebase';\nimport { checkStitch, checkDeliveredFirebase, checkUnStitchFirebase, checkLostFirebase, checkOutOfOrder, checkLost, checkOutOfOrderFirebase } from './store';\n\nexport const AlreadyCondition = () => {\n    const dispatch = useDispatch();\n    const customerState = useSelector((state: any) => state);\n    const tailor: any = customerState.tailors[0];\n    const client: any = customerState.customer[0];\n    const promise = () => {\n        firebase.firestore().collection('Condition').doc(tailor).collection(\"Sticthed\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().sticthed;\n                    checkStitch(clientName, conditionAmount, customerState, dispatch)\n                })\n            }).catch();\n        firebase.firestore().collection('Condition').doc(tailor).collection(\"Delivered\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().delivered;\n                    checkDeliveredFirebase(clientName, conditionAmount, customerState, dispatch)\n                })\n            }).catch()\n        firebase.firestore().collection('Condition').doc(tailor).collection(\"UnStitched\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().unstitched;\n                    checkUnStitchFirebase(clientName, conditionAmount, customerState, dispatch);\n                })\n            }).catch()\n        firebase.firestore().collection('Condition').doc(tailor).collection(\"Losted\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().losted;\n                    checkLostFirebase(clientName, conditionAmount, customerState, dispatch);\n                })\n            }).catch()\n        firebase.firestore().collection('Condition').doc(tailor).collection(\"OutOfOrder\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().OutOfOrder;\n                    checkOutOfOrder(clientName, conditionAmount, customerState, dispatch);\n                })\n            }).catch()\n    }\n    promise();\n\n    return (\n        <div id=\"condition\" className=\"mt-5 text-left ml-5\">\n            <div className=\"mt-5\">\n                {\n                    customerState.orders.length > 0 ?\n                        customerState.stitch.length > 0 ?\n                            customerState.stitch.map((stitch: any[], index: number) => {\n                                if (stitch[0] === client) {\n                                    return (\n                                        <p className=\"text-muted\" key={index}>  {stitch[1]} orders has stitched.</p>\n                                    )\n                                }\n                            }) : null\n                        : null\n                }\n                {\n                    customerState.orders.length > 0 ?\n                        customerState.delivered.length > 0 ?\n                            customerState.delivered.map((deliver: any[], index: number) => {\n                                if (deliver[0] === client) {\n                                    return (\n                                        <p className=\"text-muted\" key={index}>  {deliver[1]} orders has delivered.</p>\n                                    )\n                                }\n                            }) : null\n                        : null\n                }\n                {\n                    customerState.orders.length > 0 ?\n                        customerState.unStitch.length > 0 ?\n                            customerState.unStitch.map((unStitch: any[], index: number) => {\n                                if (unStitch[0] === client) {\n                                    return (\n                                        <p className=\"text-muted\" key={index}>  {unStitch[1]} orders are un stitched.</p>\n                                    )\n                                } else {\n                                    console.log(unStitch[0], client);\n\n                                }\n                            }) : null\n                        : null\n                }\n                {\n                    customerState.orders.length > 0 ?\n                        customerState.lost.length > 0 ?\n                            customerState.lost.map((losted: any, index: number) => {\n                                if (losted[0] === client) {\n                                    return (\n                                        <p className=\"text-muted\" key={index}> {losted[1]} orders has losted.</p>\n                                    )\n                                }\n                            }) : null\n                        : null\n                }\n                {\n                    customerState.outOfOrder.length > 0 ?\n                        customerState.outOfOrder.length > 0 ?\n                            customerState.outOfOrder.map((outOfOrder: any, index: number) => {\n                                if (outOfOrder[0] === client) {\n                                    return (\n                                        <p className=\"text-muted\" key={index}> {outOfOrder[1]} orders has wrong stitched.</p>\n                                    )\n                                }\n                            }) : null\n                        : null\n                }\n            </div>\n        </div>\n    )\n}","/home/faiza/Documents/Git Hub/tailor_app/src/components/EditMeasurment.tsx",["126","127"],"import { useSelector, useDispatch } from 'react-redux';\nimport { checkMeasurment, deleteClient } from './index';\nimport { history } from './index';\nimport firebase from 'firebase';\n\nexport function EditMeasurment() {\n    const customerState = useSelector((state: any) => state);\n    const client: any = customerState.customer[0];\n    const tailor: any = customerState.tailors[0];\n    const dispatch = useDispatch();\n    const saveMeasurment: any = (e: any) => {\n        e.preventDefault();\n        let previousMeasurment;\n        const [Length, Width, Neck, Chest, Waist, Bust, ArmLenght, ShoulderLenght, LegLenght] = e.target;\n        customerState.measurment.map((measurment: any, index: number) => {\n            if (measurment[0] === client) {\n                previousMeasurment = measurment[1];\n                const measurmentEle = {\n                    Length: Length.value > 0 ? Length.value : previousMeasurment.Length, Width: Width.value > 0 ? Width.value : previousMeasurment.Width, Chest: Chest.value > 0 ? Chest.value : previousMeasurment.Chest, Bust: Bust.value > 0 ? Bust.value : previousMeasurment.Bust, Waist: Waist.value > 0 ? Waist.value : previousMeasurment.Waist, Neck: Neck.value > 0 ? Neck.value : previousMeasurment.Neck, ArmLenght: ArmLenght.value > 0 ? ArmLenght.value : previousMeasurment.ArmLenght, Shoulder: ShoulderLenght.value > 0 ? ShoulderLenght.value : previousMeasurment.Shoulder, LegLenght: LegLenght.value > 0 ? LegLenght.value : previousMeasurment.LegLenght,\n                };\n                const promise = firebase.firestore().collection('Measurments').doc(tailor).collection(\"Customer\").doc(client).set({\n                    measurmentEle\n                });\n                promise.then(() => {\n                    checkMeasurment(tailor, client, measurmentEle, dispatch, customerState.measurment);\n                    history.push(\"/Measurment\");\n                    history.replace(\"/Measurment\");\n                    dispatch(deleteClient());\n                })\n                promise.catch((err) => {\n                    alert(err.message);\n                    dispatch(deleteClient());\n                })\n            }\n\n        });\n    }\n\n\n\n\n\n    return (\n        <div >\n            <div className=\"mr-5\">\n                {customerState.measurment.length > 0 ?\n                    customerState.measurment.map((measurment: any, index: number) => {\n                        if (measurment[0] === client) {\n                            return (\n                                <div id=\"editM\">\n                                    <form onSubmit={saveMeasurment} key={index}>\n                                        <div className=\"EditM\">\n                                            <div>\n                                                <label>Length</label>\n                                                <input className=\"mt-1\" type=\"number\" placeholder={measurment[1].Length} />\n                                            </div>\n                                            <div>\n                                                <label>Width</label>\n                                                <input className=\"mt-1\" type=\"number\" placeholder={measurment[1].Width} />\n                                            </div>\n                                            <div> <label>Chest</label>\n                                                <input className=\"mt-1\" type=\"number\" placeholder={measurment[1].Chest} />\n                                            </div>\n                                        </div>\n                                        <div className=\"EditM\">\n                                            <div>\n                                                <label>Waist</label>\n                                                <input className=\"mt-1\" type=\"number\" placeholder={measurment[1].Waist} />\n                                            </div>\n                                            <div>\n                                                <label>Bust</label>\n                                                <input className=\"mt-1\" type=\"number\" placeholder={measurment[1].Bust} />\n                                            </div>\n                                            <div>\n                                                <label>Arm</label>\n                                                <input className=\"mt-1\" type=\"number\" placeholder={measurment[1].ArmLenght} />\n                                            </div>\n                                        </div>\n                                        <div className=\"EditM\">\n                                            <div>\n                                                <label>Shoulder</label>\n                                                <input className=\"mt-1\" type=\"number\" placeholder={measurment[1].Shoulder} />\n                                            </div>\n                                            <div>\n                                                <label>Neck</label>\n                                                <input className=\"mt-1\" type=\"number\" placeholder={measurment[1].Neck} />\n                                            </div>\n                                            <div>\n                                                <label>Leg Length</label>\n                                                <input className=\"mt-1\" type=\"number\" placeholder={measurment[1].LegLenght} />\n                                            </div>\n                                        </div>\n                                        <button className=\"btn btn-outline-success d-inline m-0 mt-1 w-25\" type=\"submit\">Edit Measurment</button>\n                                        <button className=\"btn btn-outline-danger d-inline m-0 mt-1 ml-1 w-25\" onClick={() => {\n                                            history.push(\"/Measurment\"); history.replace('/Measurment')\n                                            dispatch(deleteClient());\n                                        }}>Cancle</button>\n                                    </form>\n                                </div>\n                            )\n                        }\n                    })\n                    :\n                    <div>\n                        <h1 className=\"h1 font-italic text-muted\">\n                            Please login first\n                             </h1>\n                        <button className=\"btn btn-outline-danger\" onClick={\n                            () => {\n                                history.push('/SignIn')\n                                history.replace('/SignIn')\n                            }\n                        }>\n                            Go to Sign In\n                             </button>\n                        <button className=\"btn btn-outline-success\" onClick={\n                            () => {\n                                history.push('/SignUp')\n                                history.replace('/SignUp')\n                            }\n                        }>\n                            Go to Sign Up\n                             </button>\n                    </div>\n                }\n            </div>\n        </div >\n    )\n}\n\n\n",{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"128","replacedBy":"132"},{"ruleId":"130","replacedBy":"133"},{"ruleId":"128","replacedBy":"134"},{"ruleId":"130","replacedBy":"135"},{"ruleId":"128","replacedBy":"136"},{"ruleId":"130","replacedBy":"137"},{"ruleId":"128","replacedBy":"138"},{"ruleId":"130","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":25,"column":11,"nodeType":"142","messageId":"143","endLine":25,"endColumn":30},{"ruleId":"140","severity":1,"message":"144","line":28,"column":51,"nodeType":"142","messageId":"143","endLine":28,"endColumn":55},{"ruleId":"145","severity":1,"message":"146","line":53,"column":81,"nodeType":"147","messageId":"148","endLine":53,"endColumn":83},{"ruleId":"128","replacedBy":"149"},{"ruleId":"130","replacedBy":"150"},{"ruleId":"140","severity":1,"message":"151","line":356,"column":11,"nodeType":"142","messageId":"143","endLine":356,"endColumn":17},{"ruleId":"152","severity":1,"message":"153","line":461,"column":97,"nodeType":"154","messageId":"155","endLine":461,"endColumn":98,"fix":"156"},{"ruleId":"152","severity":1,"message":"153","line":463,"column":100,"nodeType":"154","messageId":"155","endLine":463,"endColumn":101,"fix":"157"},{"ruleId":"152","severity":1,"message":"153","line":465,"column":95,"nodeType":"154","messageId":"155","endLine":465,"endColumn":96,"fix":"158"},{"ruleId":"140","severity":1,"message":"159","line":2,"column":8,"nodeType":"142","messageId":"143","endLine":2,"endColumn":16},{"ruleId":"145","severity":1,"message":"146","line":27,"column":68,"nodeType":"147","messageId":"148","endLine":27,"endColumn":70},{"ruleId":"140","severity":1,"message":"141","line":22,"column":11,"nodeType":"142","messageId":"143","endLine":22,"endColumn":30},{"ruleId":"145","severity":1,"message":"146","line":48,"column":79,"nodeType":"147","messageId":"148","endLine":48,"endColumn":81},{"ruleId":"145","severity":1,"message":"146","line":8,"column":68,"nodeType":"147","messageId":"148","endLine":8,"endColumn":70},{"ruleId":"140","severity":1,"message":"160","line":4,"column":106,"nodeType":"142","messageId":"143","endLine":4,"endColumn":115},{"ruleId":"140","severity":1,"message":"161","line":4,"column":117,"nodeType":"142","messageId":"143","endLine":4,"endColumn":140},{"ruleId":"145","severity":1,"message":"146","line":61,"column":85,"nodeType":"147","messageId":"148","endLine":61,"endColumn":87},{"ruleId":"145","severity":1,"message":"146","line":73,"column":89,"nodeType":"147","messageId":"148","endLine":73,"endColumn":91},{"ruleId":"145","severity":1,"message":"146","line":85,"column":89,"nodeType":"147","messageId":"148","endLine":85,"endColumn":91},{"ruleId":"145","severity":1,"message":"146","line":100,"column":81,"nodeType":"147","messageId":"148","endLine":100,"endColumn":83},{"ruleId":"145","severity":1,"message":"146","line":112,"column":91,"nodeType":"147","messageId":"148","endLine":112,"endColumn":93},{"ruleId":"145","severity":1,"message":"162","line":15,"column":71,"nodeType":"147","messageId":"163","endLine":15,"endColumn":73},{"ruleId":"145","severity":1,"message":"146","line":47,"column":83,"nodeType":"147","messageId":"148","endLine":47,"endColumn":85},"no-native-reassign",["164"],"no-negated-in-lhs",["165"],["164"],["165"],["164"],["165"],["164"],["165"],["164"],["165"],"@typescript-eslint/no-unused-vars","'saveMeasurment' is assigned a value but never used.","Identifier","unusedVar","'Bust' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["164"],["165"],"'tailor' is assigned a value but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"166","text":"167"},{"range":"168","text":"167"},{"range":"169","text":"167"},"'firebase' is defined but never used.","'checkLost' is defined but never used.","'checkOutOfOrderFirebase' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-global-assign","no-unsafe-negation",[14228,14238],"\n        .",[14347,14357],[14461,14471]]