[{"/home/faiza/Documents/Git Hub/tailor_app/src/index.tsx":"1","/home/faiza/Documents/Git Hub/tailor_app/src/components/index.tsx":"2","/home/faiza/Documents/Git Hub/tailor_app/src/components/Home.tsx":"3","/home/faiza/Documents/Git Hub/tailor_app/src/components/SignIn.tsx":"4","/home/faiza/Documents/Git Hub/tailor_app/src/components/firebase.tsx":"5","/home/faiza/Documents/Git Hub/tailor_app/src/components/NotFound.tsx":"6","/home/faiza/Documents/Git Hub/tailor_app/src/components/AddMeasurment.tsx":"7","/home/faiza/Documents/Git Hub/tailor_app/src/components/history.tsx":"8","/home/faiza/Documents/Git Hub/tailor_app/src/components/store.tsx":"9","/home/faiza/Documents/Git Hub/tailor_app/src/components/SignUp.tsx":"10","/home/faiza/Documents/Git Hub/tailor_app/src/components/Customers.tsx":"11","/home/faiza/Documents/Git Hub/tailor_app/src/components/DashBoard.tsx":"12","/home/faiza/Documents/Git Hub/tailor_app/src/components/reducer.tsx":"13","/home/faiza/Documents/Git Hub/tailor_app/src/App.tsx":"14","/home/faiza/Documents/Git Hub/tailor_app/src/components/AddDetail.tsx":"15","/home/faiza/Documents/Git Hub/tailor_app/src/components/AddOrder.tsx":"16","/home/faiza/Documents/Git Hub/tailor_app/src/components/AlreadyMeasurment.tsx":"17","/home/faiza/Documents/Git Hub/tailor_app/src/components/Condition.tsx":"18","/home/faiza/Documents/Git Hub/tailor_app/src/components/alreadyCondition.tsx":"19","/home/faiza/Documents/Git Hub/tailor_app/src/components/EditMeasurment.tsx":"20"},{"size":330,"mtime":1606992343000,"results":"21","hashOfConfig":"22"},{"size":937,"mtime":1607863654481,"results":"23","hashOfConfig":"22"},{"size":656,"mtime":1606992343000,"results":"24","hashOfConfig":"22"},{"size":1598,"mtime":1607930500532,"results":"25","hashOfConfig":"22"},{"size":562,"mtime":1606992343000,"results":"26","hashOfConfig":"22"},{"size":595,"mtime":1607251724440,"results":"27","hashOfConfig":"22"},{"size":7064,"mtime":1607933974157,"results":"28","hashOfConfig":"22"},{"size":95,"mtime":1607326904207,"results":"29","hashOfConfig":"22"},{"size":15146,"mtime":1607934729914,"results":"30","hashOfConfig":"22"},{"size":2503,"mtime":1607930057588,"results":"31","hashOfConfig":"22"},{"size":1876,"mtime":1607934009757,"results":"32","hashOfConfig":"22"},{"size":2175,"mtime":1607925159349,"results":"33","hashOfConfig":"22"},{"size":3719,"mtime":1607933137619,"results":"34","hashOfConfig":"22"},{"size":975,"mtime":1607760005743,"results":"35","hashOfConfig":"22"},{"size":3450,"mtime":1607934438439,"results":"36","hashOfConfig":"22"},{"size":1483,"mtime":1607934672838,"results":"37","hashOfConfig":"22"},{"size":4904,"mtime":1607933323193,"results":"38","hashOfConfig":"22"},{"size":1145,"mtime":1607928901473,"results":"39","hashOfConfig":"22"},{"size":5749,"mtime":1607928989192,"results":"40","hashOfConfig":"22"},{"size":7219,"mtime":1607932939300,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"34fyjp",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"55"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},"/home/faiza/Documents/Git Hub/tailor_app/src/index.tsx",[],["87","88"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/index.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/Home.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/SignIn.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/firebase.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/NotFound.tsx",[],["89","90"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/AddMeasurment.tsx",["91","92","93"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/history.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/store.tsx",["94"],"import { createStore } from 'redux';\nimport TailorReducer from './reducer';\nimport firebase from 'firebase';\nexport const store = createStore(TailorReducer);\nexport function addTailor(tailor: any) {\n    return {\n        type: \"Add_Tailor\",\n        tailor\n    }\n}\n\nexport const checkCustomer = (client: any, customerState: any, dispatch: any) => {\n    let arr = [];\n    if (client.trim() === \"\") {\n        alert(\"Please add a value\")\n    } else {\n        if (customerState.clients.length > 0) {\n            customerState.clients.forEach((customer: any) => {\n                if (customer !== client) {\n                    arr.push(\"yes\");\n                }\n            })\n        }\n        if (arr.length === customerState.clients.length) {\n            dispatch(addCustomerR(client, customerState.tailors[0]))\n        }\n        else {\n            alert(\"You have already this user\")\n        }\n    }\n}\n\nexport function addCustomerR(customer: any, tailor: any) {\n    const promise = firebase.firestore().collection('Tailors').doc(tailor).collection('Customers').doc(customer).set({\n        measurmentId: customer + \" MEASURMENT\"\n    })\n    promise.then(() => {\n    })\n    promise.catch((err) => {\n        alert(err.message)\n    })\n    return {\n        type: \"Add_Client\",\n        customer,\n    }\n}\n\n\nexport function checkCustomerFirebase(client: any, customerState: any, dispatch: any) {\n    const arr = [];\n    if (customerState.clients.length > 0) {\n        customerState.clients.forEach((customer: any) => {\n            if (customer !== client) {\n                arr.push(\"yes\");\n            }\n        })\n    }\n    if (arr.length === customerState.clients.length) {\n        checkCustomer(client, customerState, dispatch);\n    }\n}\n\n\n\nexport const checkMeasurment = (client: any, measurment: any, dispatch: any, customerStateMeasurment: any) => {\n    if (client !== undefined) {\n        if (customerStateMeasurment.length > 0) {\n            customerStateMeasurment.forEach((customer: any, index: number) => {\n                if (customer[0] === client) {\n                    dispatch(updateMeasurmentR(client, measurment, index))\n                } else {\n                    dispatch(addMeasurmentR(client, measurment));\n                }\n            })\n        } else {\n            dispatch(addMeasurmentR(client, measurment))\n        }\n    }\n}\n\nexport const checkFirebaseMeasurment = (client: any, measurment: any, dispatch: any, customerStateMeasurment: any) => {\n    const arr = [];\n    if (customerStateMeasurment.length > 0) {\n        customerStateMeasurment.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerStateMeasurment.length) {\n        checkMeasurment(client, measurment, dispatch, customerStateMeasurment)\n    }\n}\n\nexport function addMeasurmentR(client: any, measurment: measurment) {\n    return {\n        type: \"Add_Measurment\",\n        client,\n        measurment\n    }\n}\n\nexport function updateMeasurmentR(client: any, measurment: measurment, index: number) {\n    return {\n        type: \"Update_Measurment\",\n        client,\n        index,\n        measurment\n    }\n}\n\ntype measurment = {\n    Length: number, Width: number, Neck: number, Waist: number, Middle: number, LegLenght: number,\n\n}\n\nexport function checkOrderFirebase(client: any, orders: string, customerState: any, dispatch: any) {\n    const arr = [];\n    if (customerState.orders.length > 0) {\n        customerState.orders.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerState.orders.length) {\n        checkOrder(client, orders, customerState, dispatch,)\n    }\n}\n\nexport function checkOrder(client: any, orders: string, customerState: any, dispatch: any) {\n    if (customerState.orders.length > 0) {\n        customerState.orders.forEach((customer: any, index: number) => {\n            if (client !== undefined && orders !== null) {\n                if (customer[0] === client) {\n                    const order: number = parseInt(customer[1]) + parseInt(orders);\n                    dispatch(updateOrder(client, index, order, customerState.tailors[0]));\n                }\n            }\n        })\n    }\n    else {\n        if (orders !== undefined) {\n            dispatch(addOrder(client, orders, customerState.tailors[0]))\n        }\n    }\n}\nexport function addOrder(client: any, orders: string, tailor: string) {\n    firebase.firestore().collection('Orders').doc(tailor).collection(\"Customer\").doc(client).set({\n        orders: parseInt(orders)\n    }).then().catch();\n    const order = parseInt(orders)\n    return {\n        type: \"Add_Order\",\n        client,\n        orders: order\n    }\n}\nexport function updateOrder(client: any, index: any, orders: number, tailor: any) {\n    firebase.firestore().collection('Orders').doc(tailor).collection(\"Customer\").doc(client).set({\n        orders: orders\n    }).then().catch();\n    return {\n        type: \"Update_Order\",\n        client,\n        orders,\n        index\n    }\n}\n\nexport function checkStitch(client: any, amount: any, customerStateStitch: any, dispatch: any) {\n    if (customerStateStitch.length > 0) {\n        customerStateStitch.forEach((customer: any, index: number) => {\n            if (client !== undefined && amount !== null) {\n                if (customer[0] === client) {\n                    dispatch(updateStitch(client, index, amount));\n                }\n            }\n        })\n    }\n    else {\n        dispatch(addStitch(client, amount))\n    }\n}\n\nexport function addStitch(client: any, amount: any) {\n    firebase.database().ref().on(\"child_added\", snap => {\n        const tailor = snap.val();\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Sticthed\").doc(client).set({\n            sticthed: parseInt(amount)\n        }).then().catch();\n    });\n\n    return {\n        type: \"Add_Stitch\",\n        client,\n        amount\n    }\n}\n\nexport function updateStitch(client: any, index: any, amount: any) {\n    firebase.database().ref().on(\"child_added\", snap => {\n        const tailor = snap.val();\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Sticthed\").doc(client).set({\n            sticthed: parseInt(amount)\n        }).then().catch();\n    });\n\n    return {\n        type: \"Update_Stitch\",\n        index,\n        amount\n    }\n}\n\n\n\n\nexport function checkDeliveredFirebase(client: any, amount: string, customerStateDelivered: any, dispatch: any) {\n    const arr = [];\n    if (customerStateDelivered.length > 0) {\n        customerStateDelivered.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerStateDelivered.length) {\n        checkDelivered(client, amount, customerStateDelivered, dispatch,)\n    }\n}\n\nexport function checkDelivered(client: any, orders: string, customerStateOrders: any, dispatch: any) {\n    if (customerStateOrders.length > 0) {\n        customerStateOrders.forEach((customer: any, index: number) => {\n            if (client !== undefined && orders !== null) {\n                if (customer[0] === client) {\n                    dispatch(updateDelivered(client, index, orders));\n                }\n            }\n        })\n    }\n    else {\n        if (orders !== undefined) {\n            dispatch(addDelivered(client, orders))\n        }\n    }\n}\n\nexport function addDelivered(client: any, amount: any) {\n    firebase.database().ref().on(\"child_added\", snap => {\n        const tailor = snap.val();\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Delivered\").doc(client).set({\n            delivered: parseInt(amount)\n        }).then().catch();\n    });\n\n    return {\n        type: \"Add_Delivered\",\n        client,\n        amount\n    }\n}\n\nexport function updateDelivered(client: any, index: any, amount: any) {\n    firebase.database().ref().on(\"child_added\", snap => {\n        const tailor = snap.val();\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Delivered\").doc(client).set({\n            delivered: parseInt(amount)\n        }).then().catch();\n    });\n    return {\n        type: \"Update_Delivered\",\n        index,\n        amount\n    }\n}\n\nexport function checkUnStitchFirebase(client: any, amount: string, customerStateUnStitch: any, dispatch: any) {\n    const arr = [];\n    if (customerStateUnStitch.length > 0) {\n        customerStateUnStitch.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerStateUnStitch.length) {\n        checkUnStitch(client, amount, customerStateUnStitch, dispatch,)\n    }\n}\n\n\nexport function checkUnStitch(client: any, amount: string, customerStateUnStitch: any, dispatch: any) {\n    if (customerStateUnStitch.length > 0) {\n        customerStateUnStitch.forEach((customer: any, index: number) => {\n            if (client !== undefined && amount !== null) {\n                if (customer[0] === client) {\n                    dispatch(updateUnstitched(client, index, amount));\n                }\n            }\n        })\n    }\n    else {\n        if (amount !== undefined) {\n            dispatch(addUnstitched(client, amount))\n        }\n    }\n}\n\nexport function addUnstitched(client: any, amount: any) {\n    firebase.database().ref().on(\"child_added\", snap => {\n        const tailor = snap.val();\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"UnStitched\").doc(client).set({\n            unstitched: parseInt(amount)\n        }).then().catch();\n    });\n    return {\n        type: \"Add_UnStitched\",\n        client,\n        amount\n    }\n}\n\nexport function updateUnstitched(client: any, index: any, amount: any) {\n    firebase.database().ref().on(\"child_added\", snap => {\n        const tailor = snap.val();\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"UnStitched\").doc(client).set({\n            unstitched: parseInt(amount)\n        }).then().catch();\n    });\n    return {\n        type: \"Update_UnStitched\",\n        index,\n        amount\n    }\n}\n\n\nexport function checkLostFirebase(tailor: any, client: any, amount: string, customerStateLost: any, dispatch: any) {\n    const arr = [];\n    if (customerStateLost.length > 0) {\n        customerStateLost.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerStateLost.length) {\n        checkLost(tailor, client, amount, customerStateLost, dispatch,)\n    }\n}\n\n\nexport function checkLost(tailor: any, client: any, amount: string, customerStateLost: any, dispatch: any) {\n    if (customerStateLost.length > 0) {\n        customerStateLost.forEach((customer: any, index: number) => {\n            if (client !== undefined && amount !== null) {\n                if (customer[0] === client) {\n                    dispatch(updateLost(tailor, client, index, amount));\n                }\n            }\n        })\n    }\n    else {\n        if (amount !== undefined && client !== undefined) {\n            dispatch(addLost(tailor, client, amount))\n        }\n    }\n}\n\nexport function addLost(tailor: any, client: any, amount: string) {\n\n    firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Losted\").doc(client).set({\n        losted: amount\n    }).then().catch();\n    return {\n        type: \"Add_Lost\",\n        client,\n        amount\n    }\n}\n\nexport function updateLost(tailor: any, client: any, index: any, amount: any) {\n    firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Losted\").doc(client).set({\n        losted: amount\n    }).then().catch();\n    return {\n        type: \"Update_Lost\",\n        index,\n        amount\n    }\n}\n\nexport function checkOutOfOrderFirebase(tailor: any, client: any, amount: string, customerStateOutOfOrder: any, dispatch: any) {\n    const arr = [];\n    if (customerStateOutOfOrder.length > 0) {\n        customerStateOutOfOrder.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerStateOutOfOrder.length) {\n        checkLost(tailor, client, amount, customerStateOutOfOrder, dispatch,)\n    }\n}\n\nexport const deleteCustomer = (client: any, state: any) => {\n    let customerIndex;\n    state.clients.forEach((customer: any, index: number) => {\n        if (client === customer) {\n            customerIndex = index;\n            deleteFromFirebase(client, state)\n        }\n    })\n    return {\n        type: \"Delete_Client\",\n        customerIndex\n    }\n\n}\n\nexport const deleteFromFirebase = (customer: any, state: any) => {\n    firebase.firestore().collection('Tailors').doc(state.tailors[0]).collection('Customers').doc(customer).\n        delete();\n}\n\nexport function checkOutOfOrder(tailor: any, client: any, amount: string, customerStateOutOfOrder: any, dispatch: any) {\n    if (customerStateOutOfOrder.length > 0) {\n        customerStateOutOfOrder.forEach((customer: any, index: number) => {\n            if (client !== undefined && amount !== null) {\n                if (customer[0] === client) {\n                    dispatch(updateOutOfOrder(client, index, amount));\n\n                }\n            }\n        })\n    }\n    else {\n        if (amount !== undefined && client !== undefined) {\n            dispatch(addOutOfOrder(client, amount))\n        }\n    }\n}\n\nexport function addOutOfOrder(client: any, amount: string) {\n\n    firebase.database().ref().on(\"child_added\", snap => {\n        const tailor = snap.val();\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"OutOfOrder\").doc(client).set({\n            OutOfOrder: parseInt(amount)\n        }).then().catch();\n    });\n    return {\n        type: \"Add_OutOfOrder\",\n        client,\n        amount\n    }\n}\nexport function updateOutOfOrder(client: any, index: any, amount: any) {\n    firebase.database().ref().on(\"child_added\", snap => {\n        const tailor = snap.val();\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"OutOfOrder\").doc(client).set({\n            OutOfOrder: parseInt(amount)\n        }).then().catch();\n    });\n    return {\n        type: \"Update_OutOfOrder\",\n        index: index,\n        amount\n    }\n}\n\nexport const addClient = (customer: any) => {\n    return {\n        type: \"Add_Customer\",\n        customer\n    }\n}\n\nexport const deleteClient = () => {\n    return {\n        type: \"Delete_Customer\",\n    }\n}","/home/faiza/Documents/Git Hub/tailor_app/src/components/SignUp.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/Customers.tsx",["95"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/DashBoard.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/reducer.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/App.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/AddDetail.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/AddOrder.tsx",["96"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/AlreadyMeasurment.tsx",["97","98"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/Condition.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/alreadyCondition.tsx",["99","100","101","102","103","104","105"],"import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport firebase from 'firebase';\nimport { checkStitch, checkDeliveredFirebase, checkUnStitchFirebase, checkLostFirebase, checkOutOfOrder, checkLost, checkOutOfOrderFirebase } from './store';\n\nexport const AlreadyCondition = () => {\n    const dispatch = useDispatch();\n    const customerState = useSelector((state: any) => state);\n    const tailor: any = customerState.tailors[0];\n    const client: any = customerState.customer[0];\n      const promise = () => {\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Sticthed\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().sticthed;\n                    checkStitch(clientName, conditionAmount, customerState.stitch, dispatch)\n                })\n            }).catch();\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Delivered\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().delivered;\n                    checkDeliveredFirebase(clientName, conditionAmount, customerState.delivered, dispatch)\n                })\n            }).catch()\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"UnStitched\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().unstitched;\n                    checkUnStitchFirebase(clientName, conditionAmount, customerState.unStitch, dispatch);\n                })\n            }).catch()\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Losted\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().losted;\n                    checkLostFirebase(tailor, clientName, conditionAmount, customerState.lost, dispatch);\n                })\n            }).catch()\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"OutOfOrder\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().OutOfOrder;\n                    checkOutOfOrder(tailor, clientName, conditionAmount, customerState.outOfOrder, dispatch);\n                })\n            }).catch()\n    }\n    promise();\n\n    return (\n        <div id=\"condition\">\n            {\n                customerState.orders.length > 0 ?\n                    customerState.stitch.length > 0 ?\n                        customerState.stitch.map((stitch: any[], index: number) => {\n                            if (stitch[0] === client) {\n                                return (\n                                    <p className=\"text-muted\" key={index}>  {stitch[1]} orders has stitched.</p>\n                                )\n                            }\n                        }) : null\n                    : null\n            }\n            {\n                customerState.orders.length > 0 ?\n                    customerState.delivered.length > 0 ?\n                        customerState.delivered.map((deliver: any[], index: number) => {\n                            if (deliver[0] === client) {\n                                return (\n                                    <p className=\"text-muted\" key={index}>  {deliver[1]} orders has delivered.</p>\n                                )\n                            }\n                        }) : null\n                    : null\n            }\n            {\n                customerState.orders.length > 0 ?\n                    customerState.unStitch.length > 0 ?\n                        customerState.unStitch.map((unStitch: any[], index: number) => {\n                            if (unStitch[0] === client) {\n                                return (\n                                    <p className=\"text-muted\" key={index}>  {unStitch[1]} orders are un stitched.</p>\n                                )\n                            } else {\n                                console.log(unStitch[0], client);\n\n                            }\n                        }) : null\n                    : null\n            }\n            {\n                customerState.orders.length > 0 ?\n                    customerState.lost.length > 0 ?\n                        customerState.lost.map((losted: any, index: number) => {\n                            if (losted[0] === client) {\n                                return (\n                                    <p className=\"text-muted\" key={index}> {losted[1]} orders has losted.</p>\n                                )\n                            }\n                        }) : null\n                    : null\n            }\n            {\n                customerState.outOfOrder.length > 0 ?\n                    customerState.outOfOrder.length > 0 ?\n                        customerState.outOfOrder.map((outOfOrder: any, index: number) => {\n                            if (outOfOrder[0] === client) {\n                                return (\n                                    <p className=\"text-muted\" key={index}> {outOfOrder[1]} orders has wrong stitched.</p>\n                                )\n                            }\n                        }) : null\n                    : null\n            }\n        </div>\n    )\n}","/home/faiza/Documents/Git Hub/tailor_app/src/components/EditMeasurment.tsx",["106","107"],"import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { checkMeasurment, deleteClient } from './index';\nimport firebase from 'firebase';\nimport { history } from './index';\n\nexport function EditMeasurment() {\n    const customerState = useSelector((state: any) => state);\n    const client: any = customerState.customer[0];\n    const tailor: any = customerState.tailors[0];\n    const dispatch = useDispatch();\n    const saveMeasurment: any = (e: any) => {\n        e.preventDefault();\n\n        const [Length, Width, Neck, Chest, Waist, Bust, ArmLenght, ShoulderLenght, LegLenght] = e.target;\n        const measurmentEle = {\n            Length: Length.value, Width: Width.value, Chest: Chest.value, Bust: Bust.value, Waist: Waist.value, Neck: Neck.value, ArmLenght: ArmLenght.value, Shoulder: ShoulderLenght.value, LegLenght: LegLenght.value,\n        }\n\n        firebase.database().ref().on(\"child_added\", snap => {\n            const promise = firebase.firestore().collection('Customers').doc(tailor).collection(client).doc(\"Measurment\").set({\n                measurmentEle\n            });\n            promise.then(() => {\n                alert(\"Data is updated\");\n                checkMeasurment(client, measurmentEle, dispatch, customerState.measurment);\n                history.push(\"/DashBoard\");\n                history.replace(\"/DashBoard\");\n                dispatch(deleteClient());\n            })\n            promise.catch((err) => {\n                alert(err.message);\n                dispatch(deleteClient());\n            })\n        });\n    }\n    return (\n        <div >\n            <div className=\"mr-5\">\n                <div id=\"editM\">\n                    {customerState.measurment.length > 0 ?\n                        customerState.measurment.map((measurment: any, index: number) => {\n                            let Length = measurment[1].Length;\n                            const handleLength = (event: any) => {\n                                Length = \"\";\n                                console.log(Length, event.target.value);\n                            };\n                            if (measurment[0] === client) {\n                                return (<form onSubmit={saveMeasurment}>\n                                    <div className=\"EditM\">\n                                        <div>\n                                            <label>Length</label>\n                                            <input className=\"mt-1\" type=\"number\" placeholder=\"Length\" onChange={(e) => {\n                                                Length = \"\";\n                                                e.target.value = \"\"\n                                                console.log(e.target.value);\n\n                                            }} value={Length} required />\n                                        </div>\n                                        <div>\n                                            <label>Width</label>\n                                            <input className=\"mt-1\" type=\"number\" placeholder=\"Width\" required value={measurment[1].Width} />\n                                        </div>\n                                        <div> <label>Chest</label>\n                                            <input className=\"mt-1\" type=\"number\" placeholder=\"Chest\" required value={measurment[1].Chest} />\n                                        </div>\n                                    </div>\n                                    <div className=\"EditM\">\n                                        <div>\n                                            <label>Waist</label>\n                                            <input className=\"mt-1\" type=\"number\" placeholder=\"Waist\" required value={measurment[1].Waist} />\n                                        </div>\n                                        <div>\n                                            <label>Bust</label>\n                                            <input className=\"mt-1\" type=\"number\" placeholder=\"Bust\" required value={measurment[1].Bust} />\n                                        </div>\n                                        <div>\n                                            <label>Arm</label>\n                                            <input className=\"mt-1\" type=\"number\" placeholder=\"Arm Lenght\" required value={measurment[1].ArmLenght} />\n                                        </div>\n                                    </div>\n                                    <div className=\"EditM\">\n                                        <div>\n                                            <label>Shoulder</label>\n                                            <input className=\"mt-1\" type=\"number\" placeholder=\"Shoulder Lenght\" required value={measurment[1].Shoulder} />\n                                        </div>\n                                        <div>\n                                            <label>Neck</label>\n                                            <input className=\"mt-1\" type=\"number\" placeholder=\"Neck\" required value={measurment[1].Neck} />\n                                        </div>\n                                        <div>\n                                            <label>Leg Length</label>\n                                            <input className=\"mt-1\" type=\"number\" placeholder=\"Leg Lenght\" required value={measurment[1].LegLenght} />\n                                        </div>\n                                    </div>\n                                    <button className=\"btn btn-outline-success d-inline m-0 mt-1 w-25\" type=\"submit\">Edit Measurment</button>\n                                    <button className=\"btn btn-outline-danger d-inline m-0 mt-1 ml-1 w-25\" type=\"button\" onClick={() => {\n                                        history.push(\"/DashBoard\"); history.replace('/DashBoard')\n                                        dispatch(deleteClient());\n                                    }}>Cancle</button>\n                                </form>)\n                            }\n                        })\n                        :\n                        <div>\n                            <h1 className=\"h1 font-italic text-muted\">\n                                Please login first\n                             </h1>\n                            <button className=\"btn btn-outline-danger\" onClick={\n                                () => {\n                                    history.push('/SignIn')\n                                    history.replace('/SignIn')\n                                }\n                            }>\n                                Go to Sign In\n                             </button>\n                            <button className=\"btn btn-outline-success\" onClick={\n                                () => {\n                                    history.push('/SignUp')\n                                    history.replace('/SignUp')\n                                }\n                            }>\n                                Go to Sign Up\n                             </button>\n                        </div>\n                    }\n                </div>\n            </div>\n        </div >\n    )\n}\n\n",{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"108","replacedBy":"112"},{"ruleId":"110","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":25,"column":11,"nodeType":"116","messageId":"117","endLine":25,"endColumn":30},{"ruleId":"114","severity":1,"message":"118","line":28,"column":51,"nodeType":"116","messageId":"117","endLine":28,"endColumn":55},{"ruleId":"119","severity":1,"message":"120","line":53,"column":81,"nodeType":"121","messageId":"122","endLine":53,"endColumn":83},{"ruleId":"123","severity":1,"message":"124","line":437,"column":107,"nodeType":"125","messageId":"126","endLine":437,"endColumn":108,"fix":"127"},{"ruleId":"114","severity":1,"message":"128","line":2,"column":8,"nodeType":"116","messageId":"117","endLine":2,"endColumn":16},{"ruleId":"119","severity":1,"message":"120","line":27,"column":68,"nodeType":"121","messageId":"122","endLine":27,"endColumn":70},{"ruleId":"114","severity":1,"message":"115","line":22,"column":11,"nodeType":"116","messageId":"117","endLine":22,"endColumn":30},{"ruleId":"119","severity":1,"message":"120","line":51,"column":79,"nodeType":"121","messageId":"122","endLine":51,"endColumn":81},{"ruleId":"114","severity":1,"message":"129","line":4,"column":106,"nodeType":"116","messageId":"117","endLine":4,"endColumn":115},{"ruleId":"114","severity":1,"message":"130","line":4,"column":117,"nodeType":"116","messageId":"117","endLine":4,"endColumn":140},{"ruleId":"119","severity":1,"message":"120","line":60,"column":81,"nodeType":"121","messageId":"122","endLine":60,"endColumn":83},{"ruleId":"119","severity":1,"message":"120","line":72,"column":85,"nodeType":"121","messageId":"122","endLine":72,"endColumn":87},{"ruleId":"119","severity":1,"message":"120","line":84,"column":85,"nodeType":"121","messageId":"122","endLine":84,"endColumn":87},{"ruleId":"119","severity":1,"message":"120","line":99,"column":77,"nodeType":"121","messageId":"122","endLine":99,"endColumn":79},{"ruleId":"119","severity":1,"message":"120","line":111,"column":87,"nodeType":"121","messageId":"122","endLine":111,"endColumn":89},{"ruleId":"119","severity":1,"message":"120","line":42,"column":87,"nodeType":"121","messageId":"122","endLine":42,"endColumn":89},{"ruleId":"114","severity":1,"message":"131","line":44,"column":35,"nodeType":"116","messageId":"117","endLine":44,"endColumn":47},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],["132"],["133"],"@typescript-eslint/no-unused-vars","'saveMeasurment' is assigned a value but never used.","Identifier","unusedVar","'Bust' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"134","text":"135"},"'firebase' is defined but never used.","'checkLost' is defined but never used.","'checkOutOfOrderFirebase' is defined but never used.","'handleLength' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[13439,13449],"\n        ."]