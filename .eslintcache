[{"/home/faiza/Documents/Git Hub/tailor_app/src/index.tsx":"1","/home/faiza/Documents/Git Hub/tailor_app/src/components/index.tsx":"2","/home/faiza/Documents/Git Hub/tailor_app/src/components/Home.tsx":"3","/home/faiza/Documents/Git Hub/tailor_app/src/components/SignIn.tsx":"4","/home/faiza/Documents/Git Hub/tailor_app/src/components/firebase.tsx":"5","/home/faiza/Documents/Git Hub/tailor_app/src/components/NotFound.tsx":"6","/home/faiza/Documents/Git Hub/tailor_app/src/components/AddMeasurment.tsx":"7","/home/faiza/Documents/Git Hub/tailor_app/src/components/history.tsx":"8","/home/faiza/Documents/Git Hub/tailor_app/src/components/store.tsx":"9","/home/faiza/Documents/Git Hub/tailor_app/src/components/SignUp.tsx":"10","/home/faiza/Documents/Git Hub/tailor_app/src/components/Customers.tsx":"11","/home/faiza/Documents/Git Hub/tailor_app/src/components/DashBoard.tsx":"12","/home/faiza/Documents/Git Hub/tailor_app/src/components/reducer.tsx":"13","/home/faiza/Documents/Git Hub/tailor_app/src/App.tsx":"14","/home/faiza/Documents/Git Hub/tailor_app/src/components/AddDetail.tsx":"15","/home/faiza/Documents/Git Hub/tailor_app/src/components/AddOrder.tsx":"16","/home/faiza/Documents/Git Hub/tailor_app/src/components/AlreadyMeasurment.tsx":"17","/home/faiza/Documents/Git Hub/tailor_app/src/components/Condition.tsx":"18","/home/faiza/Documents/Git Hub/tailor_app/src/components/alreadyCondition.tsx":"19","/home/faiza/Documents/Git Hub/tailor_app/src/components/EditMeasurment.tsx":"20"},{"size":330,"mtime":1606992343000,"results":"21","hashOfConfig":"22"},{"size":912,"mtime":1607759954167,"results":"23","hashOfConfig":"22"},{"size":656,"mtime":1606992343000,"results":"24","hashOfConfig":"22"},{"size":1069,"mtime":1607863054489,"results":"25","hashOfConfig":"22"},{"size":562,"mtime":1606992343000,"results":"26","hashOfConfig":"22"},{"size":595,"mtime":1607251724440,"results":"27","hashOfConfig":"22"},{"size":6052,"mtime":1607778546582,"results":"28","hashOfConfig":"22"},{"size":95,"mtime":1607326904207,"results":"29","hashOfConfig":"22"},{"size":14581,"mtime":1607774709703,"results":"30","hashOfConfig":"22"},{"size":1824,"mtime":1607764464726,"results":"31","hashOfConfig":"22"},{"size":1946,"mtime":1607863160166,"results":"32","hashOfConfig":"22"},{"size":1878,"mtime":1607776681842,"results":"33","hashOfConfig":"22"},{"size":3228,"mtime":1607769681168,"results":"34","hashOfConfig":"22"},{"size":975,"mtime":1607760005743,"results":"35","hashOfConfig":"22"},{"size":2465,"mtime":1607519498755,"results":"36","hashOfConfig":"22"},{"size":1452,"mtime":1607434369573,"results":"37","hashOfConfig":"22"},{"size":3989,"mtime":1607781036822,"results":"38","hashOfConfig":"22"},{"size":1154,"mtime":1607764589025,"results":"39","hashOfConfig":"22"},{"size":5734,"mtime":1607525897221,"results":"40","hashOfConfig":"22"},{"size":6630,"mtime":1607782550783,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"34fyjp",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"49"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"49"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/faiza/Documents/Git Hub/tailor_app/src/index.tsx",[],["92","93"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/index.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/Home.tsx",[],["94","95"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/SignIn.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/firebase.tsx",[],["96","97"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/NotFound.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/AddMeasurment.tsx",["98","99","100"],"import React from 'react';\nimport firebase from 'firebase';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { checkFirebaseMeasurment, checkMeasurment } from './index';\nimport { history } from './history';\nimport { AlreadyMeasurment } from './AlreadyMeasurment';\nexport function Measurment() {\n    const client: any = localStorage.getItem(\"customer\");\n    const tailor: any = localStorage.getItem(\"tailor\");\n    const dispatch = useDispatch();\n    const customerState = useSelector((state: any) => state);\n    const promise = () => {\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Measurment\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const measurment = client.data().measurmentEle;\n                    checkFirebaseMeasurment(clientName, measurment, dispatch, customerState.measurment);\n                })\n            }).catch()\n    }\n    promise();\n\n    const saveMeasurment: any = (e: any) => {\n        e.preventDefault();\n\n        const [Length, Width, Neck, Chest, Waist, Bust, ArmLenght, ShoulderLenght, LegLenght] = e.target;\n        const measurmentEle = {\n            Length: Length.value, Width: Width.value, Chest: Chest.value, Waist: Waist.value, Neck: Neck.value, ArmLenght: ArmLenght.value, Shoulder: ShoulderLenght.value, LegLenght: LegLenght.value,\n        }\n\n        firebase.database().ref().on(\"child_added\", snap => {\n            const promise = firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Measurment\").doc(client).set({\n                measurmentEle\n            });\n            promise.then(() => {\n                alert(\"Data is updated\");\n                checkMeasurment(client, measurmentEle, dispatch, customerState.measurment);\n                history.push(\"/DashBoard\");\n                history.replace(\"/DashBoard\");\n            })\n            promise.catch((err) => {\n                alert(err.message)\n            })\n        });\n    }\n\n    let arr = [];\n    return (\n        <div>\n            <h1 className=\"h1 text-muted\">Measurment</h1>\n            {customerState.measurment.length > 0 ?\n                customerState.measurment.map((measurment: any[], index: number) => {\n                    if (measurment[0] === client) {\n                        return (<AlreadyMeasurment client={client} />)\n                    } else { arr.push(\"yes\") }\n                })\n                : <AddMeasurment />\n            }\n            { customerState.measurment.length > 0 ?\n                arr.length === customerState.measurment.length ?\n                    <AddMeasurment />\n                    : null\n                : null\n            }\n\n        </div>\n    )\n}\n\n\n\nexport const AddMeasurment = () => {\n    const client: any = localStorage.getItem(\"customer\");\n    const tailor: any = localStorage.getItem(\"tailor\");\n    const dispatch = useDispatch();\n    const customerState = useSelector((state: any) => state);\n    const promise = () => {\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Measurment\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const measurment = client.data().measurmentEle;\n                    checkFirebaseMeasurment(clientName, measurment, dispatch, customerState.measurment);\n                })\n            }).catch()\n    }\n    promise();\n\n    const saveMeasurment: any = (e: any) => {\n        e.preventDefault();\n\n        const [Length, Width, Neck, Chest, Waist, Bust, ArmLenght, ShoulderLenght, LegLenght, Hip] = e.target;\n        const measurmentEle = {\n            Length: Length.value, Width: Width.value, Chest: Chest.value, Bust: Bust.value, Waist: Waist.value, Neck: Neck.value, ArmLenght: ArmLenght.value, Shoulder: ShoulderLenght.value, LegLenght: LegLenght.value, Hip: Hip.value,\n        }\n\n        firebase.database().ref().on(\"child_added\", snap => {\n            const promise = firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Measurment\").doc(client).set({\n                measurmentEle\n            });\n            promise.then(() => {\n                alert(\"Data is updated\");\n                checkMeasurment(client, measurmentEle, dispatch, customerState.measurment);\n                history.push(\"/DashBoard\");\n                history.replace(\"/DashBoard\");\n            })\n            promise.catch((err) => {\n                alert(err.message)\n            })\n        });\n    }\n\n    return (<div>\n        <div className=\"measurment\">\n            <form className=\"mr-5 \" onSubmit={saveMeasurment}>\n                <input className=\"form-control\" type=\"number\" placeholder=\"Length\" required />\n                <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Width\" required />\n                <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Neck\" required />\n                <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Chest\" required />\n                <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Waist\" required />\n                <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Bust\" required />\n                <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Arm Width\" required />\n                <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Shoulder Width\" required />\n                <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Shoulder Width\" required />\n                <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Hip\" required />\n                <button className=\"btn btn-outline-success d-inline\" type=\"submit\">Save Measurment</button>\n                <button className=\"btn btn-outline-danger\" type=\"button\" onClick={() => { history.push(\"/DashBoard\"); history.replace('/DashBoard') }}>Cancle</button>\n            </form>\n        </div>\n    </div>\n    )\n}\n","/home/faiza/Documents/Git Hub/tailor_app/src/components/history.tsx",[],["101","102"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/store.tsx",["103"],"import { createStore } from 'redux';\nimport TailorReducer from './reducer';\nimport { v4 as uuid } from 'uuid';\nimport firebase from 'firebase';\nexport const store = createStore(TailorReducer);\nexport function addTailor(tailor: any) {\n    return {\n        type: \"Add_Tailor\",\n        tailor\n    }\n}\n\nexport const checkCustomer = (client: any, customerState: any, dispatch: any) => {\n    let arr = [];\n    if (client.trim() === \"\") {\n        alert(\"Please add a value\")\n    } else {\n        if (customerState.clients.length > 0) {\n            customerState.clients.forEach((customer: any) => {\n                if (customer !== client) {\n                    arr.push(\"yes\");\n                }\n            })\n        }\n        if (arr.length === customerState.clients.length) {\n            dispatch(addCustomerR(client, customerState.tailors[0]))\n        }\n        else {\n            alert(\"You have already this user\")\n        }\n    }\n}\n\nexport function addCustomerR(customer: any, tailor: any) {\n    const promise = firebase.firestore().collection('Tailors').doc(tailor).collection('Customers').doc(customer).set({\n        id: customer + \" Measurment\"\n    })\n    promise.then(() => {\n    })\n    promise.catch((err) => {\n        alert(err.message)\n    })\n    return {\n        type: \"Add_Customer\",\n        customer,\n    }\n}\n\n\nexport function checkCustomerFirebase(client: any, customerState: any, dispatch: any) {\n    const arr  = [];\n    if (customerState.clients.length > 0) {\n        customerState.clients.forEach((customer: any) => {\n            if (customer !== client) {\n                arr.push(\"yes\");\n            }\n        })\n    }\n    if (arr.length === customerState.clients.length) {\n        checkCustomer(client, customerState, dispatch);\n    }\n}\n\n\n\nexport const checkMeasurment = (client: any, measurment: any, dispatch: any, customerStateMeasurment: any) => {\n    if (client !== undefined) {\n        if (customerStateMeasurment.length > 0) {\n            customerStateMeasurment.forEach((customer: any, index: number) => {\n                if (customer[0] === client) {\n                    dispatch(updateMeasurmentR(client, measurment, index))\n                } else {\n                    dispatch(addMeasurmentR(client, measurment));\n                }\n            })\n        } else {\n            dispatch(addMeasurmentR(client, measurment))\n        }\n    }\n}\n\nexport const checkFirebaseMeasurment = (client: any, measurment: any, dispatch: any, customerStateMeasurment: any) => {\n    const arr = [];\n    if (customerStateMeasurment.length > 0) {\n        customerStateMeasurment.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerStateMeasurment.length) {\n        checkMeasurment(client, measurment, dispatch, customerStateMeasurment)\n    }\n}\n\nexport function addMeasurmentR(client: any, measurment: measurment) {\n    return {\n        type: \"Add_Measurment\",\n        client,\n        measurment\n    }\n}\n\nexport function updateMeasurmentR(client: any, measurment: measurment, index: number) {\n    return {\n        type: \"Update_Measurment\",\n        client,\n        index,\n        measurment\n    }\n}\n\ntype measurment = {\n    Length: number, Width: number, Neck: number, Waist: number, Middle: number, LegLenght: number,\n\n}\n\nexport function checkOrderFirebase(client: any, orders: string, customerStateOrders: any, dispatch: any) {\n    const arr = [];\n    if (customerStateOrders.length > 0) {\n        customerStateOrders.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerStateOrders.length) {\n        checkOrder(client, orders, customerStateOrders, dispatch,)\n    }\n}\n\nexport function checkOrder(client: any, orders: string, customerStateOrders: any, dispatch: any) {\n    if (customerStateOrders.length > 0) {\n        customerStateOrders.forEach((customer: any, index: number) => {\n            if (client !== undefined && orders !== null) {\n                if (customer[0] === client) {\n                    const order: number = parseInt(customer[1]) + parseInt(orders);\n                    dispatch(updateOrder(client, index, order));\n                }\n            }\n        })\n    }\n    else {\n        if (orders !== undefined) {\n            dispatch(addOrder(client, orders))\n        }\n    }\n}\nexport function addOrder(client: any, orders: string) {\n    firebase.database().ref().on(\"child_added\", snap => {\n        const tailor = snap.val();\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Orders\").doc(client).set({\n            orders: parseInt(orders)\n        }).then().catch();\n    });\n    const order = parseInt(orders)\n    return {\n        type: \"Add_Order\",\n        client,\n        orders: order\n    }\n}\nexport function updateOrder(client: any, index: any, orders: number) {\n    firebase.database().ref().on(\"child_added\", snap => {\n        const tailor = snap.val();\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Orders\").doc(client).set({\n            orders: orders\n        }).then().catch();\n    });\n    return {\n        type: \"Update_Order\",\n        client,\n        orders,\n        index\n    }\n}\n\nexport function checkStitch(client: any, amount: any, customerStateStitch: any, dispatch: any) {\n    if (customerStateStitch.length > 0) {\n        customerStateStitch.forEach((customer: any, index: number) => {\n            if (client !== undefined && amount !== null) {\n                if (customer[0] === client) {\n                    dispatch(updateStitch(client, index, amount));\n                }\n            }\n        })\n    }\n    else {\n        dispatch(addStitch(client, amount))\n    }\n}\n\nexport function addStitch(client: any, amount: any) {\n    firebase.database().ref().on(\"child_added\", snap => {\n        const tailor = snap.val();\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Sticthed\").doc(client).set({\n            sticthed: parseInt(amount)\n        }).then().catch();\n    });\n\n    return {\n        type: \"Add_Stitch\",\n        client,\n        amount\n    }\n}\n\nexport function updateStitch(client: any, index: any, amount: any) {\n    firebase.database().ref().on(\"child_added\", snap => {\n        const tailor = snap.val();\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Sticthed\").doc(client).set({\n            sticthed: parseInt(amount)\n        }).then().catch();\n    });\n\n    return {\n        type: \"Update_Stitch\",\n        index,\n        amount\n    }\n}\n\n\n\n\nexport function checkDeliveredFirebase(client: any, amount: string, customerStateDelivered: any, dispatch: any) {\n    const arr = [];\n    if (customerStateDelivered.length > 0) {\n        customerStateDelivered.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerStateDelivered.length) {\n        checkDelivered(client, amount, customerStateDelivered, dispatch,)\n    }\n}\n\nexport function checkDelivered(client: any, orders: string, customerStateOrders: any, dispatch: any) {\n    if (customerStateOrders.length > 0) {\n        customerStateOrders.forEach((customer: any, index: number) => {\n            if (client !== undefined && orders !== null) {\n                if (customer[0] === client) {\n                    dispatch(updateDelivered(client, index, orders));\n                }\n            }\n        })\n    }\n    else {\n        if (orders !== undefined) {\n            dispatch(addDelivered(client, orders))\n        }\n    }\n}\n\nexport function addDelivered(client: any, amount: any) {\n    firebase.database().ref().on(\"child_added\", snap => {\n        const tailor = snap.val();\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Delivered\").doc(client).set({\n            delivered: parseInt(amount)\n        }).then().catch();\n    });\n\n    return {\n        type: \"Add_Delivered\",\n        client,\n        amount\n    }\n}\n\nexport function updateDelivered(client: any, index: any, amount: any) {\n    firebase.database().ref().on(\"child_added\", snap => {\n        const tailor = snap.val();\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Delivered\").doc(client).set({\n            delivered: parseInt(amount)\n        }).then().catch();\n    });\n    return {\n        type: \"Update_Delivered\",\n        index,\n        amount\n    }\n}\n\nexport function checkUnStitchFirebase(client: any, amount: string, customerStateUnStitch: any, dispatch: any) {\n    const arr = [];\n    if (customerStateUnStitch.length > 0) {\n        customerStateUnStitch.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerStateUnStitch.length) {\n        checkUnStitch(client, amount, customerStateUnStitch, dispatch,)\n    }\n}\n\n\nexport function checkUnStitch(client: any, amount: string, customerStateUnStitch: any, dispatch: any) {\n    if (customerStateUnStitch.length > 0) {\n        customerStateUnStitch.forEach((customer: any, index: number) => {\n            if (client !== undefined && amount !== null) {\n                if (customer[0] === client) {\n                    dispatch(updateUnstitched(client, index, amount));\n                }\n            }\n        })\n    }\n    else {\n        if (amount !== undefined) {\n            dispatch(addUnstitched(client, amount))\n        }\n    }\n}\n\nexport function addUnstitched(client: any, amount: any) {\n    firebase.database().ref().on(\"child_added\", snap => {\n        const tailor = snap.val();\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"UnStitched\").doc(client).set({\n            unstitched: parseInt(amount)\n        }).then().catch();\n    });\n    return {\n        type: \"Add_UnStitched\",\n        client,\n        amount\n    }\n}\n\nexport function updateUnstitched(client: any, index: any, amount: any) {\n    firebase.database().ref().on(\"child_added\", snap => {\n        const tailor = snap.val();\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"UnStitched\").doc(client).set({\n            unstitched: parseInt(amount)\n        }).then().catch();\n    });\n    return {\n        type: \"Update_UnStitched\",\n        index,\n        amount\n    }\n}\n\n\nexport function checkLostFirebase(tailor: any, client: any, amount: string, customerStateLost: any, dispatch: any) {\n    const arr = [];\n    if (customerStateLost.length > 0) {\n        customerStateLost.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerStateLost.length) {\n        checkLost(tailor, client, amount, customerStateLost, dispatch,)\n    }\n}\n\n\nexport function checkLost(tailor: any, client: any, amount: string, customerStateLost: any, dispatch: any) {\n    if (customerStateLost.length > 0) {\n        customerStateLost.forEach((customer: any, index: number) => {\n            if (client !== undefined && amount !== null) {\n                if (customer[0] === client) {\n                    dispatch(updateLost(tailor, client, index, amount));\n                }\n            }\n        })\n    }\n    else {\n        if (amount !== undefined && client !== undefined) {\n            dispatch(addLost(tailor, client, amount))\n        }\n    }\n}\n\nexport function addLost(tailor: any, client: any, amount: string) {\n\n    firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Losted\").doc(client).set({\n        losted: amount\n    }).then().catch();\n    return {\n        type: \"Add_Lost\",\n        client,\n        amount\n    }\n}\n\nexport function updateLost(tailor: any, client: any, index: any, amount: any) {\n    firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Losted\").doc(client).set({\n        losted: amount\n    }).then().catch();\n    return {\n        type: \"Update_Lost\",\n        index,\n        amount\n    }\n}\n\nexport function checkOutOfOrderFirebase(tailor: any, client: any, amount: string, customerStateOutOfOrder: any, dispatch: any) {\n    const arr = [];\n    if (customerStateOutOfOrder.length > 0) {\n        customerStateOutOfOrder.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerStateOutOfOrder.length) {\n        checkLost(tailor, client, amount, customerStateOutOfOrder, dispatch,)\n    }\n}\n\n\nexport function checkOutOfOrder(tailor: any, client: any, amount: string, customerStateOutOfOrder: any, dispatch: any) {\n    if (customerStateOutOfOrder.length > 0) {\n        customerStateOutOfOrder.forEach((customer: any, index: number) => {\n            if (client !== undefined && amount !== null) {\n                if (customer[0] === client) {\n                    dispatch(updateOutOfOrder(client, index, amount));\n\n                }\n            }\n        })\n    }\n    else {\n        if (amount !== undefined && client !== undefined) {\n            dispatch(addOutOfOrder(client, amount))\n        }\n    }\n}\n\nexport function addOutOfOrder(client: any, amount: string) {\n\n    firebase.database().ref().on(\"child_added\", snap => {\n        const tailor = snap.val();\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"OutOfOrder\").doc(client).set({\n            OutOfOrder: parseInt(amount)\n        }).then().catch();\n    });\n    return {\n        type: \"Add_OutOfOrder\",\n        client,\n        amount\n    }\n}\nexport function updateOutOfOrder(client: any, index: any, amount: any) {\n    firebase.database().ref().on(\"child_added\", snap => {\n        const tailor = snap.val();\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"OutOfOrder\").doc(client).set({\n            OutOfOrder: parseInt(amount)\n        }).then().catch();\n    });\n    return {\n        type: \"Update_OutOfOrder\",\n        index: index,\n        amount\n    }\n}\n",["104","105"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/SignUp.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/Customers.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/DashBoard.tsx",["106","107"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/reducer.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/App.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/AddDetail.tsx",["108"],"import React from 'react';\nimport { AddOrder, checkOrder, history, AlreadyCondition } from './index';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Condition } from './Condition';\nimport { checkStitch, checkDelivered, checkUnStitch, checkLost, checkOutOfOrder } from './store';\nimport firebase from 'firebase';\n\nexport const AddDetail = () => {\n    const dispatch = useDispatch();\n    const customerState = useSelector((state: any) => state);\n    const client: any = localStorage.getItem(\"customer\");\n    const tailor: any = localStorage.getItem(\"tailor\");\n\n    const saveDetail: any = (e: any) => {\n        e.preventDefault();\n\n        const [NewOrders, sticthed, delivered, unStitched, lost, outOfOrder] = e.target;\n        if (NewOrders) {\n            if (NewOrders.value > 0) {\n                checkOrder(client, NewOrders.value, customerState.orders, dispatch)\n            }\n        }\n\n        if (sticthed) {\n\n            if (sticthed.value > 0) {\n                checkStitch(client, sticthed.value, customerState.stitch, dispatch)\n            }\n        }\n\n        if (delivered) {\n            if (delivered.value > 0) {\n                checkDelivered(client, delivered.value, customerState.delivered, dispatch)\n            }\n        }\n        if (unStitched) {\n\n            if (unStitched.value > 0) {\n                checkUnStitch(client, unStitched.value, customerState.unStitch, dispatch);\n            }\n        }\n        if (lost) {\n            if (lost.value > 0) {\n                checkLost(tailor, client, lost.value, customerState.lost, dispatch)\n            }\n        }\n        if (outOfOrder) {\n            if (outOfOrder.value > 0) {\n                checkOutOfOrder(tailor, client, outOfOrder.value, customerState.outOfOrder, dispatch)\n            }\n        }\n        history.push(\"/DashBoard\");\n        history.replace(\"/DashBoard\");\n    }\n    return (\n        <form onSubmit={saveDetail}>\n            <div id=\"addDetail\">\n                <AddOrder client={client} />\n                <Condition client={client} tailor={tailor} />\n                <AlreadyCondition client={client} tailor={tailor} />\n            </div>\n            <button id=\"saveDetail\" className=\"btn btn-outline-primary\" type=\"submit\">Save Detail</button>\n            <button className=\"btn btn-outline-success\" type=\"button\" onClick={() => { history.push(\"/DashBoard\"); history.replace('/DashBoard') }}>Save Without Changing</button>\n        </form>\n    )\n}","/home/faiza/Documents/Git Hub/tailor_app/src/components/AddOrder.tsx",["109"],"import React from 'react';\nimport firebase from 'firebase';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { checkOrderFirebase } from './index';\nexport const AddOrder = (props: any) => {\n    const dispatch = useDispatch();\n    const customerState = useSelector((state: any) => state);\n    const tailor: any = localStorage.getItem(\"tailor\");\n    const promise = () => {\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Orders\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const orders = client.data().orders;\n\n                    checkOrderFirebase(clientName, orders, customerState.orders, dispatch)\n                })\n            });\n    }\n    promise();\n\n    return (<div>\n        <h1 className=\"h1 text-muted\">Orders</h1>\n        <p className=\"text-muted\">If you want to stitch new dress: </p>\n        <input className=\"d-inline form-control\" type=\"text\" placeholder=\"Add number of orders here\" />\n        {customerState.orders.length > 0 ?\n            customerState.orders.map((order: any[], index: number) => {\n                if (order[0] === props.client) {\n                    return (\n                        <p key={index} className=\"text-muted mt-1\">Already Orders are {order[1]}</p>\n                    )\n                }\n            }) :\n            null\n        }\n    </div>)\n}","/home/faiza/Documents/Git Hub/tailor_app/src/components/AlreadyMeasurment.tsx",["110","111"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/Condition.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/alreadyCondition.tsx",["112","113","114","115","116","117","118"],"import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport firebase from 'firebase';\nimport { checkStitch, checkDeliveredFirebase, checkUnStitchFirebase, checkLostFirebase, checkOutOfOrder, checkLost, checkOutOfOrderFirebase } from './store';\n\nexport const AlreadyCondition = (props: any) => {\n    const dispatch = useDispatch();\n    const customerState = useSelector((state: any) => state);\n    const promise = () => {\n        firebase.firestore().collection('Tailor App').doc(props.tailor).collection(\"Sticthed\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().sticthed;\n                    checkStitch(clientName, conditionAmount, customerState.stitch, dispatch)\n                })\n            }).catch();\n        firebase.firestore().collection('Tailor App').doc(props.tailor).collection(\"Delivered\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().delivered;\n                    checkDeliveredFirebase(clientName, conditionAmount, customerState.delivered, dispatch)\n                })\n            }).catch()\n        firebase.firestore().collection('Tailor App').doc(props.tailor).collection(\"UnStitched\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().unstitched;\n                    checkUnStitchFirebase(clientName, conditionAmount, customerState.unStitch, dispatch);\n                })\n            }).catch()\n        firebase.firestore().collection('Tailor App').doc(props.tailor).collection(\"Losted\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().losted;\n                    checkLostFirebase(props.tailor, clientName, conditionAmount, customerState.lost, dispatch);\n                })\n            }).catch()\n        firebase.firestore().collection('Tailor App').doc(props.tailor).collection(\"OutOfOrder\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().OutOfOrder;\n                    checkOutOfOrder(props.tailor, clientName, conditionAmount, customerState.outOfOrder, dispatch);\n                })\n            }).catch()\n    }\n    promise();\n\n    return (\n        <div id=\"condition\">\n            {\n                customerState.orders.length > 0 ?\n                    customerState.stitch.length > 0 ?\n                        customerState.stitch.map((stitch: any[], index: number) => {\n                            if (stitch[0] === props.client) {\n                                return (\n                                    <p className=\"text-muted\" key={index}>  {stitch[1]} orders has stitched.</p>\n                                )\n                            }\n                        }) : null\n                    : null\n            }\n            {\n                customerState.orders.length > 0 ?\n                    customerState.delivered.length > 0 ?\n                        customerState.delivered.map((deliver: any[], index: number) => {\n                            if (deliver[0] === props.client) {\n                                return (\n                                    <p className=\"text-muted\" key={index}>  {deliver[1]} orders has delivered.</p>\n                                )\n                            }\n                        }) : null\n                    : null\n            }\n            {\n                customerState.orders.length > 0 ?\n                    customerState.unStitch.length > 0 ?\n                        customerState.unStitch.map((unStitch: any[], index: number) => {\n                            if (unStitch[0] === props.client) {\n                                return (\n                                    <p className=\"text-muted\" key={index}>  {unStitch[1]} orders are un stitched.</p>\n                                )\n                            } else {\n                                console.log(unStitch[0], props.client);\n\n                            }\n                        }) : null\n                    : null\n            }\n            {\n                customerState.orders.length > 0 ?\n                    customerState.lost.length > 0 ?\n                        customerState.lost.map((losted: any, index: number) => {\n                            if (losted[0] === props.client) {\n                                return (\n                                    <p className=\"text-muted\" key={index}> {losted[1]} orders has losted.</p>\n                                )\n                            }\n                        }) : null\n                    : null\n            }\n            {\n                customerState.outOfOrder.length > 0 ?\n                    customerState.outOfOrder.length > 0 ?\n                        customerState.outOfOrder.map((outOfOrder: any, index: number) => {\n                            if (outOfOrder[0] === props.client) {\n                                return (\n                                    <p className=\"text-muted\" key={index}> {outOfOrder[1]} orders has wrong stitched.</p>\n                                )\n                            }\n                        }) : null\n                    : null\n            }\n        </div>\n    )\n}","/home/faiza/Documents/Git Hub/tailor_app/src/components/EditMeasurment.tsx",["119","120","121"],{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"122","replacedBy":"126"},{"ruleId":"124","replacedBy":"127"},{"ruleId":"122","replacedBy":"128"},{"ruleId":"124","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":24,"column":11,"nodeType":"132","messageId":"133","endLine":24,"endColumn":30},{"ruleId":"130","severity":1,"message":"134","line":27,"column":51,"nodeType":"132","messageId":"133","endLine":27,"endColumn":55},{"ruleId":"135","severity":1,"message":"136","line":53,"column":81,"nodeType":"137","messageId":"138","endLine":53,"endColumn":83},{"ruleId":"122","replacedBy":"139"},{"ruleId":"124","replacedBy":"140"},{"ruleId":"130","severity":1,"message":"141","line":3,"column":16,"nodeType":"132","messageId":"133","endLine":3,"endColumn":20},{"ruleId":"122","replacedBy":"142"},{"ruleId":"124","replacedBy":"143"},{"ruleId":"130","severity":1,"message":"144","line":2,"column":8,"nodeType":"132","messageId":"133","endLine":2,"endColumn":16},{"ruleId":"130","severity":1,"message":"145","line":5,"column":10,"nodeType":"132","messageId":"133","endLine":5,"endColumn":31},{"ruleId":"130","severity":1,"message":"144","line":6,"column":8,"nodeType":"132","messageId":"133","endLine":6,"endColumn":16},{"ruleId":"135","severity":1,"message":"136","line":27,"column":68,"nodeType":"137","messageId":"138","endLine":27,"endColumn":70},{"ruleId":"130","severity":1,"message":"131","line":23,"column":11,"nodeType":"132","messageId":"133","endLine":23,"endColumn":30},{"ruleId":"135","severity":1,"message":"136","line":50,"column":79,"nodeType":"137","messageId":"138","endLine":50,"endColumn":81},{"ruleId":"130","severity":1,"message":"146","line":4,"column":106,"nodeType":"132","messageId":"133","endLine":4,"endColumn":115},{"ruleId":"130","severity":1,"message":"147","line":4,"column":117,"nodeType":"132","messageId":"133","endLine":4,"endColumn":140},{"ruleId":"135","severity":1,"message":"136","line":58,"column":81,"nodeType":"137","messageId":"138","endLine":58,"endColumn":83},{"ruleId":"135","severity":1,"message":"136","line":70,"column":85,"nodeType":"137","messageId":"138","endLine":70,"endColumn":87},{"ruleId":"135","severity":1,"message":"136","line":82,"column":85,"nodeType":"137","messageId":"138","endLine":82,"endColumn":87},{"ruleId":"135","severity":1,"message":"136","line":97,"column":77,"nodeType":"137","messageId":"138","endLine":97,"endColumn":79},{"ruleId":"135","severity":1,"message":"136","line":109,"column":87,"nodeType":"137","messageId":"138","endLine":109,"endColumn":89},{"ruleId":"130","severity":1,"message":"148","line":3,"column":27,"nodeType":"132","messageId":"133","endLine":3,"endColumn":50},{"ruleId":"135","severity":1,"message":"136","line":40,"column":87,"nodeType":"137","messageId":"138","endLine":40,"endColumn":89},{"ruleId":"130","severity":1,"message":"149","line":42,"column":35,"nodeType":"132","messageId":"133","endLine":42,"endColumn":47},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],["150"],["151"],["150"],["151"],"@typescript-eslint/no-unused-vars","'saveMeasurment' is assigned a value but never used.","Identifier","unusedVar","'Bust' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["150"],["151"],"'uuid' is defined but never used.",["150"],["151"],"'firebase' is defined but never used.","'checkCustomerFirebase' is defined but never used.","'checkLost' is defined but never used.","'checkOutOfOrderFirebase' is defined but never used.","'checkFirebaseMeasurment' is defined but never used.","'handleLength' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]