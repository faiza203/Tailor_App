[{"/home/faiza/Documents/GitHub/Tailor_App/src/index.tsx":"1","/home/faiza/Documents/GitHub/Tailor_App/src/App.tsx":"2","/home/faiza/Documents/GitHub/Tailor_App/src/components/index.tsx":"3","/home/faiza/Documents/GitHub/Tailor_App/src/components/Home.tsx":"4","/home/faiza/Documents/GitHub/Tailor_App/src/components/SignUp.tsx":"5","/home/faiza/Documents/GitHub/Tailor_App/src/components/SignIn.tsx":"6","/home/faiza/Documents/GitHub/Tailor_App/src/components/firebase.tsx":"7","/home/faiza/Documents/GitHub/Tailor_App/src/components/NotFound.tsx":"8","/home/faiza/Documents/GitHub/Tailor_App/src/components/DashBoard.tsx":"9","/home/faiza/Documents/GitHub/Tailor_App/src/components/Customers.tsx":"10","/home/faiza/Documents/GitHub/Tailor_App/src/components/AddMeasurment.tsx":"11","/home/faiza/Documents/GitHub/Tailor_App/src/components/history.tsx":"12","/home/faiza/Documents/GitHub/Tailor_App/src/components/store.tsx":"13","/home/faiza/Documents/GitHub/Tailor_App/src/components/AddDetail.tsx":"14","/home/faiza/Documents/GitHub/Tailor_App/src/components/AddOrder.tsx":"15","/home/faiza/Documents/GitHub/Tailor_App/src/components/AlreadyMeasurment.tsx":"16","/home/faiza/Documents/GitHub/Tailor_App/src/components/Condition.tsx":"17","/home/faiza/Documents/GitHub/Tailor_App/src/components/alreadyCondition.tsx":"18","/home/faiza/Documents/GitHub/Tailor_App/src/components/EditMeasurment.tsx":"19","/home/faiza/Documents/GitHub/Tailor_App/src/components/reducer.tsx":"20"},{"size":330,"mtime":1621165962639,"results":"21","hashOfConfig":"22"},{"size":975,"mtime":1621165962639,"results":"23","hashOfConfig":"22"},{"size":951,"mtime":1621165962639,"results":"24","hashOfConfig":"22"},{"size":656,"mtime":1621165962639,"results":"25","hashOfConfig":"22"},{"size":2285,"mtime":1621172550328,"results":"26","hashOfConfig":"22"},{"size":1739,"mtime":1621172687321,"results":"27","hashOfConfig":"22"},{"size":562,"mtime":1621165962639,"results":"28","hashOfConfig":"22"},{"size":595,"mtime":1621165962639,"results":"29","hashOfConfig":"22"},{"size":2053,"mtime":1621173701826,"results":"30","hashOfConfig":"22"},{"size":2176,"mtime":1621222318460,"results":"31","hashOfConfig":"22"},{"size":5751,"mtime":1621222370208,"results":"32","hashOfConfig":"22"},{"size":95,"mtime":1621165962639,"results":"33","hashOfConfig":"22"},{"size":16807,"mtime":1621165962639,"results":"34","hashOfConfig":"22"},{"size":4148,"mtime":1621172630551,"results":"35","hashOfConfig":"22"},{"size":1462,"mtime":1621165962639,"results":"36","hashOfConfig":"22"},{"size":5437,"mtime":1621173814738,"results":"37","hashOfConfig":"22"},{"size":1274,"mtime":1621165962639,"results":"38","hashOfConfig":"22"},{"size":6018,"mtime":1621165962639,"results":"39","hashOfConfig":"22"},{"size":7239,"mtime":1621165962639,"results":"40","hashOfConfig":"22"},{"size":4089,"mtime":1621222428384,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1wqeauj",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":8,"source":"69","usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/faiza/Documents/GitHub/Tailor_App/src/index.tsx",[],["89","90"],"/home/faiza/Documents/GitHub/Tailor_App/src/App.tsx",[],"/home/faiza/Documents/GitHub/Tailor_App/src/components/index.tsx",[],"/home/faiza/Documents/GitHub/Tailor_App/src/components/Home.tsx",[],"/home/faiza/Documents/GitHub/Tailor_App/src/components/SignUp.tsx",[],"/home/faiza/Documents/GitHub/Tailor_App/src/components/SignIn.tsx",[],"/home/faiza/Documents/GitHub/Tailor_App/src/components/firebase.tsx",[],"/home/faiza/Documents/GitHub/Tailor_App/src/components/NotFound.tsx",[],"/home/faiza/Documents/GitHub/Tailor_App/src/components/DashBoard.tsx",[],"/home/faiza/Documents/GitHub/Tailor_App/src/components/Customers.tsx",["91"],"/home/faiza/Documents/GitHub/Tailor_App/src/components/AddMeasurment.tsx",["92"],"/home/faiza/Documents/GitHub/Tailor_App/src/components/history.tsx",[],"/home/faiza/Documents/GitHub/Tailor_App/src/components/store.tsx",["93","94","95","96","97","98","99","100","101","102","103","104","105","106"],"import { createStore } from 'redux';\nimport TailorReducer from './reducer';\nimport firebase from 'firebase';\nexport const store = createStore(TailorReducer);\nexport function addTailor(tailor: any) {\n    return {\n        type: \"Add_Tailor\",\n        tailor\n    }\n}\nexport function deleteTailor() {\n    console.log(\"Sign Out\");\n    \n    return {\n        type: \"Delete_Tailor\"\n    }\n}\n\nexport const checkCustomer = (client: any, customerState: any, dispatch: any) => {\n    let arr = [];\n    if (client.trim() === \"\") {\n        alert(\"Please add a value\")\n    } else {\n        if (customerState.clients.length > 0) {\n            customerState.clients.forEach((customer: any) => {\n                if (customer !== client) {\n                    arr.push(\"yes\");\n                }\n            })\n        }\n        if (arr.length === customerState.clients.length) {\n            dispatch(addCustomerR(client, customerState.tailors[0]))\n        }\n        else {\n            alert(\"You have already this user\")\n        }\n    }\n}\n\nexport function addCustomerR(customer: any, tailor: any) {\n    const promise = firebase.firestore().collection('Tailors').doc(tailor).collection('Customers').doc(customer).set({\n        measurmentId: customer + \" MEASURMENT\"\n    })\n    promise.then(() => {\n    })\n    promise.catch((err) => {\n        alert(err.message)\n    })\n    return {\n        type: \"Add_Client\",\n        customer,\n    }\n}\n\n\nexport function checkCustomerFirebase(client: any, customerState: any, dispatch: any) {\n    const arr = [];\n    if (customerState.clients.length > 0) {\n        customerState.clients.forEach((customer: any) => {\n            if (customer !== client) {\n                arr.push(\"yes\");\n            }\n        })\n    }\n    if (arr.length === customerState.clients.length) {\n        checkCustomer(client, customerState, dispatch);\n    }\n}\n\n\n\nexport const checkMeasurment = (client: any, measurment: any, dispatch: any, customerStateMeasurment: any) => {\n    if (client !== undefined) {\n        if (customerStateMeasurment.length > 0) {\n            customerStateMeasurment.forEach((customer: any, index: number) => {\n                if (customer[0] === client) {\n                    dispatch(updateMeasurmentR(client, measurment, index))\n                } else {\n                    dispatch(addMeasurmentR(client, measurment));\n                }\n            })\n        } else {\n            dispatch(addMeasurmentR(client, measurment))\n        }\n    }\n}\n\nexport const checkFirebaseMeasurment = (client: any, measurment: any, dispatch: any, customerStateMeasurment: any) => {\n    const arr = [];\n    if (customerStateMeasurment.length > 0) {\n        customerStateMeasurment.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerStateMeasurment.length) {\n        checkMeasurment(client, measurment, dispatch, customerStateMeasurment)\n    }\n}\n\nexport function addMeasurmentR(client: any, measurment: measurment) {\n    return {\n        type: \"Add_Measurment\",\n        client,\n        measurment\n    }\n}\n\nexport function updateMeasurmentR(client: any, measurment: measurment, index: number) {\n    return {\n        type: \"Update_Measurment\",\n        client,\n        index,\n        measurment\n    }\n}\n\ntype measurment = {\n    Length: number, Width: number, Neck: number, Waist: number, Middle: number, LegLenght: number,\n\n}\n\nexport function checkOrderFirebase(client: any, orders: string, customerState: any, dispatch: any) {\n    const arr = [];\n    if (customerState.orders.length > 0) {\n        customerState.orders.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerState.orders.length) {\n        checkOrder(client, orders, customerState, dispatch,)\n    }\n}\n\nexport function checkOrder(client: any, orders: string, customerState: any, dispatch: any) {\n    const arr = [];\n    if (customerState.orders.length > 0) {\n        customerState.orders.forEach((customer: any, index: number) => {\n            if (customer[0] === client) {\n                const order: number = parseInt(customer[1]) + parseInt(orders);\n                dispatch(updateOrder(client, index, order, customerState.tailors[0]));\n            } else {\n                arr.push(\"yes\");\n            }\n        })\n        if (arr.length === customerState.orders.length) {\n            dispatch(addOrder(client, orders, customerState.tailors[0]));\n        }\n    }\n    if (customerState.orders.length === 0) {\n        dispatch(addOrder(client, orders, customerState.tailors[0]));\n    }\n}\nexport function addOrder(client: any, orders: string, tailor: string) {\n    firebase.firestore().collection('Orders').doc(tailor).collection(\"Customer\").doc(client).set({\n        orders: parseInt(orders)\n    }).then().catch();\n    const order = parseInt(orders)\n    return {\n        type: \"Add_Order\",\n        client,\n        orders: order\n    }\n}\nexport function updateOrder(client: any, index: any, orders: number, tailor: any) {\n    firebase.firestore().collection('Orders').doc(tailor).collection(\"Customer\").doc(client).set({\n        orders: orders\n    }).then().catch();\n    return {\n        type: \"Update_Order\",\n        client,\n        orders,\n        index\n    }\n}\n\n\nexport function checkStitch(client: any, amount: any, customerState: any, dispatch: any) {\n    if (customerState.stitch.length > 0) {\n        customerState.stitch.forEach((customer: any, index: number) => {\n            if (client !== undefined && amount !== null) {\n                if (customer[0] === client) {\n                    dispatch(updateStitch(client, index, amount, customerState.tailors[0]));\n                }\n            }\n        })\n    }\n    else {\n        dispatch(addStitch(client, amount, customerState.tailors[0]))\n    }\n}\n\nexport function addStitch(client: any, amount: any, tailor: string) {\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"Sticthed\").doc(client).set({\n        sticthed: parseInt(amount)\n    }).then().catch();\n    return {\n        type: \"Add_Stitch\",\n        client,\n        amount\n    }\n}\n\nexport function updateStitch(client: any, index: any, amount: any, tailor: string) {\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"Sticthed\").doc(client).set({\n        sticthed: parseInt(amount)\n    }).then().catch();\n\n    return {\n        type: \"Update_Stitch\",\n        index,\n        amount\n    }\n}\n\n\n\n\nexport function checkDeliveredFirebase(client: any, amount: string, customerState: any, dispatch: any) {\n    const arr = [];\n    if (customerState.delivered.length > 0) {\n        customerState.delivered.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerState.delivered.length) {\n        checkDelivered(client, amount, customerState, dispatch,)\n    }\n}\n\nexport function checkDelivered(client: any, orders: string, customerState: any, dispatch: any) {\n    const tailor = customerState.tailors[0];\n    if (customerState.delivered.length > 0) {\n        customerState.delivered.forEach((customer: any, index: number) => {\n            if (customer[0] === client) {\n                dispatch(updateDelivered(client, index, orders, tailor));\n            }\n        })\n    }\n    else {\n        if (orders !== undefined) {\n            dispatch(addDelivered(client, orders, tailor))\n        }\n    }\n}\n\nexport function addDelivered(client: any, amount: any, tailor: string) {\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"Delivered\").doc(client).set({\n        delivered: parseInt(amount)\n    }).then().catch();\n    return {\n        type: \"Add_Delivered\",\n        client,\n        amount\n    }\n}\n\nexport function updateDelivered(client: any, index: any, amount: any, tailor: string) {\n    firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Delivered\").doc(client).set({\n        delivered: parseInt(amount)\n    }).then().catch();\n    return {\n        type: \"Update_Delivered\",\n        index,\n        amount\n    }\n}\n\nexport function checkUnStitchFirebase(client: any, amount: string, customerState: any, dispatch: any) {\n    const arr = [];\n    if (customerState.unStitch.length > 0) {\n        customerState.unStitch.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerState.unStitch.length) {\n        checkUnStitch(client, amount, customerState, dispatch,)\n    }\n}\n\n\nexport function checkUnStitch(client: any, amount: string, customerState: any, dispatch: any) {\n    if (customerState.unStitch.length > 0) {\n        customerState.unStitch.forEach((customer: any, index: number) => {\n            if (client !== undefined && amount !== null) {\n                if (customer[0] === client) {\n                    dispatch(updateUnstitched(client, index, amount, customerState.tailors[0]));\n                }\n            }\n        })\n    }\n    else {\n        if (amount !== undefined) {\n            dispatch(addUnstitched(client, amount, customerState.tailors[0]))\n        }\n    }\n}\n\nexport function addUnstitched(client: any, amount: any, tailor: string) {\n    firebase.firestore().collection('Tailor App').doc(tailor).collection(\"UnStitched\").doc(client).set({\n        unstitched: parseInt(amount)\n    }).then().catch();\n    return {\n        type: \"Add_UnStitched\",\n        client,\n        amount\n    }\n}\n\nexport function updateUnstitched(client: any, index: any, amount: any, tailor: string) {\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"UnStitched\").doc(client).set({\n        unstitched: parseInt(amount)\n    }).then().catch();\n    return {\n        type: \"Update_UnStitched\",\n        index,\n        amount\n    }\n}\n\n\nexport function checkLostFirebase(client: any, amount: string, customerState: any, dispatch: any) {\n    const tailor = customerState.tailors[0];\n    const arr = [];\n    if (customerState.lost.length > 0) {\n        customerState.lost.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerState.lost.length) {\n        checkLost(client, amount, customerState, dispatch,)\n    }\n}\n\n\nexport function checkLost(client: any, amount: string, customerState: any, dispatch: any) {\n    const tailor = customerState.tailors[0];\n    if (customerState.lost.length > 0) {\n        customerState.lost.forEach((customer: any, index: number) => {\n            if (client !== undefined && amount !== null) {\n                if (customer[0] === client) {\n                    dispatch(updateLost(tailor, client, index, amount));\n                }\n            }\n        })\n    }\n    else {\n        if (amount !== undefined && client !== undefined) {\n            dispatch(addLost(tailor, client, amount))\n        }\n    }\n}\n\nexport function addLost(tailor: any, client: any, amount: string) {\n\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"Losted\").doc(client).set({\n        losted: amount\n    }).then().catch();\n    return {\n        type: \"Add_Lost\",\n        client,\n        amount\n    }\n}\n\nexport function updateLost(tailor: any, client: any, index: any, amount: any) {\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"Losted\").doc(client).set({\n        losted: amount\n    }).then().catch();\n    return {\n        type: \"Update_Lost\",\n        index,\n        amount\n    }\n}\n\nexport function checkOutOfOrderFirebase(client: any, amount: string, customerState: any, dispatch: any) {\n    const arr = [];\n    if (customerState.outOfOrder.length > 0) {\n        customerState.outOfOrder.forEach((customer: any, index: number) => {\n            if (client !== undefined) {\n                if (customer[0] !== client) {\n                    arr.push(\"yes\");\n                }\n            }\n        })\n    }\n    if (arr.length === customerState.outOfOrder.length) {\n        checkLost(client, amount, customerState, dispatch,)\n    }\n}\n\nexport const deleteCustomer = (client: any, state: any) => {\n    let customerIndex;\n    let measurmentIndex;\n    let orderIndex;\n    let stitchIndex;\n    let deliveredIndex;\n    let unStitchIndex;\n    let lostIndex;\n    let outOfOrderIndex;\n    state.clients.forEach((customer: any, index: number) => {\n        if (client === customer) {\n            customerIndex = index;\n            deleteFromFirebase(client, state)\n        }\n    })\n    state.measurment.forEach((customer: any[], index: number) => {\n        if (client === customer[0]) {\n            measurmentIndex = index;\n        }\n    })\n    state.orders.forEach((customer: any[], index: number) => {\n        if (client === customer[0]) {\n            orderIndex = index;\n        }\n    })\n    state.stitch.forEach((customer: any[], index: number) => {\n        if (client === customer[0]) {\n            stitchIndex = index;\n        }\n    })\n    state.delivered.forEach((customer: any[], index: number) => {\n        if (client === customer[0]) {\n            deliveredIndex = index;\n        }\n    })\n    state.unStitch.forEach((customer: any[], index: number) => {\n        if (client === customer[0]) {\n            unStitchIndex = index;\n        }\n    })\n    state.lost.forEach((customer: any[], index: number) => {\n        if (client === customer[0]) {\n            lostIndex = index;\n        }\n    })\n    state.outOfOrder.forEach((customer: any[], index: number) => {\n        if (client === customer[0]) {\n            outOfOrderIndex = index;\n        }\n    })\n    return {\n        type: \"Delete_Client\",\n        customerIndex,\n        measurmentIndex,\n        orderIndex\n    }\n\n}\n\nexport const deleteFromFirebase = (customer: any, state: any) => {\n    const tailor = state.tailors[0];\n    firebase.firestore().collection('Tailors').doc(tailor).collection('Customers').doc(customer).\n        delete();\n    firebase.firestore().collection('Measurments').doc(tailor).collection(\"Customer\").doc(customer).\n        delete();\n    firebase.firestore().collection('Orders').doc(tailor).collection(\"Customer\").doc(customer).\n        delete();\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"Delivered\").doc(customer).\n        delete();\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"Losted\").doc(customer).\n        delete();\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"OutOfOrder\").doc(customer).\n        delete();\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"Sticthed\").doc(customer).\n        delete();\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"UnStitched\").doc(customer).\n        delete();\n}\n\nexport function checkOutOfOrder(client: any, amount: string, customerState: any, dispatch: any) {\n    const tailor = customerState.tailors[0];\n    if (customerState.outOfOrder.length > 0) {\n        customerState.outOfOrder.forEach((customer: any, index: number) => {\n            if (client !== undefined && amount !== null) {\n                if (customer[0] === client) {\n                    dispatch(updateOutOfOrder(client, index, amount, tailor));\n\n                }\n            }\n        })\n    }\n    else {\n        if (amount !== undefined && client !== undefined) {\n            dispatch(addOutOfOrder(client, amount, tailor))\n        }\n    }\n}\n\nexport function addOutOfOrder(client: any, amount: string, tailor: any) {\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"OutOfOrder\").doc(client).set({\n        OutOfOrder: parseInt(amount)\n    }).then().catch();\n    return {\n        type: \"Add_OutOfOrder\",\n        client,\n        amount\n    }\n}\nexport function updateOutOfOrder(client: any, index: any, amount: any, tailor: any) {\n    firebase.firestore().collection('Condition').doc(tailor).collection(\"OutOfOrder\").doc(client).set({\n        OutOfOrder: parseInt(amount)\n    }).then().catch();\n    return {\n        type: \"Update_OutOfOrder\",\n        index: index,\n        amount\n    }\n}\n\nexport const addClient = (customer: any) => {\n    return {\n        type: \"Add_Customer\",\n        customer\n    }\n}\n\nexport const deleteClient = () => {\n    return {\n        type: \"Delete_Customer\",\n    }\n}","/home/faiza/Documents/GitHub/Tailor_App/src/components/AddDetail.tsx",[],"/home/faiza/Documents/GitHub/Tailor_App/src/components/AddOrder.tsx",["107"],"import React from 'react';\nimport firebase from 'firebase';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { checkOrderFirebase } from './index';\nexport const AddOrder = () => {\n    const dispatch = useDispatch();\n    const customerState = useSelector((state: any) => state);\n    const client: any = customerState.customer[0];\n    const tailor: any = customerState.tailors[0];\n    const promise = () => {\n        firebase.firestore().collection('Orders').doc(tailor).collection(\"Customer\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(clients => {\n                    const clientName = clients.id;\n                    const orders = clients.data().orders;\n                    checkOrderFirebase(clientName, orders, customerState, dispatch)\n                })\n            });\n    }\n    promise();\n\n    return (<div>\n        <h1 className=\"h1 text-muted\">Orders</h1>\n        <p className=\"text-muted\">If you want to stitch new dress: </p>\n        <input className=\"d-inline\" type=\"number\" placeholder=\"Add Orders\" />\n        {customerState.orders.length > 0 ?\n            customerState.orders.map((order: any[], index: number) => {\n                if (order[0].toUpperCase() === client) {\n                    return (\n                        <p key={index} className=\"text-muted mt-1\">Already Orders are {order[1]}</p>\n                    )\n                }\n            }) :\n            null\n        }\n    </div>)\n}","/home/faiza/Documents/GitHub/Tailor_App/src/components/AlreadyMeasurment.tsx",["108","109"],"import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  checkMeasurment,\n  checkFirebaseMeasurment,\n  deleteClient,\n  history,\n} from \"./index\";\nimport firebase from \"firebase\";\n\nexport function AlreadyMeasurment(props: any) {\n  const customerState = useSelector((state: any) => state);\n  const tailor: any = customerState.tailors[0];\n  const client: any = customerState.customer[0];\n  const dispatch = useDispatch();\n  const promise = () => {\n    firebase\n      .firestore()\n      .collection(\"Measurments\")\n      .doc(tailor)\n      .collection(\"Customer\")\n      .get()\n      .then((snapshot) => {\n        snapshot.docs.forEach((client) => {\n          const clientName = client.id;\n          const measurment = client.data().measurmentEle;\n          checkFirebaseMeasurment(\n            clientName,\n            measurment,\n            dispatch,\n            customerState.measurment\n          );\n        });\n      })\n      .catch();\n  };\n  promise();\n  const saveMeasurment: any = (e: any) => {\n    e.preventDefault();\n\n    const [\n      Length,\n      Width,\n      Neck,\n      Chest,\n      Waist,\n      Bust,\n      ArmLenght,\n      ShoulderLenght,\n      LegLenght,\n    ] = e.target;\n    const measurmentEle = {\n      Length: Length.value,\n      Width: Width.value,\n      Chest: Chest.value,\n      Bust: Bust.value,\n      Waist: Waist.value,\n      Neck: Neck.value,\n      ArmLenght: ArmLenght.value,\n      Shoulder: ShoulderLenght.value,\n      LegLenght: LegLenght.value,\n    };\n    firebase\n      .database()\n      .ref()\n      .on(\"child_added\", (snap) => {\n        const promise = firebase\n          .firestore()\n          .collection(\"Measurment\")\n          .doc(tailor)\n          .collection(\"Customers\")\n          .doc(client)\n          .set({\n            measurmentEle,\n          });\n        promise.then(() => {\n          checkMeasurment(\n            client,\n            measurmentEle,\n            dispatch,\n            customerState.measurment\n          );\n          history.push(\"/Measurment\");\n          history.replace(\"/Measurment\");\n          dispatch(deleteClient());\n        });\n        promise.catch((err) => {\n          alert(err.message);\n          dispatch(deleteClient());\n        });\n      });\n  };\n  return (\n    <div>\n      {customerState.tailors.length > 0 ? (\n        customerState.measurment.map((measurment: any, index: number) => {\n          if (measurment[0] === client) {\n            return (\n              <div key={index} className=\"mr-5\">\n                <ul key={index + 10} className=\"measurment\">\n                  <li key={index + 1} className=\"text-muted\">\n                    {\" \"}\n                    Length : {measurment[1].Length}\n                  </li>\n                  <li key={index + 2} className=\"text-muted\">\n                    {\" \"}\n                    Width : {measurment[1].Width}\n                  </li>\n                  <li key={index + 3} className=\"text-muted\">\n                    {\" \"}\n                    Neck : {measurment[1].Neck}\n                  </li>\n                  <li key={index + 4} className=\"text-muted\">\n                    {\" \"}\n                    Waist : {measurment[1].Waist}\n                  </li>\n                  <li key={index + 5} className=\"text-muted\">\n                    {\" \"}\n                    Bust : {measurment[1].Bust}\n                  </li>\n                  <li key={index + 6} className=\"text-muted\">\n                    {\" \"}\n                    Chest : {measurment[1].Chest}\n                  </li>\n                  <li key={index + 7} className=\"text-muted\">\n                    {\" \"}\n                    Arm Lenght : {measurment[1].ArmLenght}\n                  </li>\n                  <li key={index + 8} className=\"text-muted\">\n                    {\" \"}\n                    Shoulder Length : {measurment[1].Shoulder}\n                  </li>\n                  <li key={index + 9} className=\"text-muted\">\n                    {\" \"}\n                    Leg Lenght : {measurment[1].LegLenght}\n                  </li>\n                </ul>\n                <button\n                  className=\"btn btn-outline-danger\"\n                  onClick={() => {\n                    history.push(\"/EditMeasurment\");\n                    history.replace(\"/EditMeasurment\");\n                  }}\n                >\n                  Edit\n                </button>\n                <button\n                  className=\"btn btn-outline-success\"\n                  onClick={() => {\n                    history.push(\"/Dashboard\");\n                    history.replace(\"/Dashboard\");\n                    dispatch(deleteClient());\n                  }}\n                >\n                  Cancle\n                </button>\n              </div>\n            );\n          }\n        })\n      ) : (\n        <div>\n          <h1 className=\"h1 font-italic text-muted\">Please login first</h1>\n          <button\n            className=\"btn btn-outline-danger\"\n            onClick={() => {\n              history.push(\"/SignIn\");\n              history.replace(\"/SignIn\");\n            }}\n          >\n            Go to Sign In\n          </button>\n          <button\n            className=\"btn btn-outline-success\"\n            onClick={() => {\n              history.push(\"/SignUp\");\n              history.replace(\"/SignUp\");\n            }}\n          >\n            Go to Sign Up\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n","/home/faiza/Documents/GitHub/Tailor_App/src/components/Condition.tsx",["110"],"import { useSelector } from 'react-redux';\n\nexport const Condition = () => {\n    const customerState = useSelector((state: any) => state);\n    const client: any = customerState.customer[0];\n    return (<div id=\" Condition\">\n        {customerState.orders.length > 0 ?\n            customerState.orders.map((order: any[], index: number) => {\n                if (order[0].toUpperCase() === client) {\n                    return (\n                        <div className=\"condition ml-5\" key={index}>\n                            <h1 className=\"h1 text-muted\">Condition</h1>\n                            <p className=\"text-muted\">If you want to  add   Condition : </p>\n                            <input type=\"number\" placeholder=\" Stitched  \" />\n                            <input className=\" mt-1 \" type=\"number\" placeholder=\" Delivered  \" />\n                            <input className=\" mt-1 \" type=\"number\" placeholder=\" Un Stitched  \" />\n                            <input className=\" mt-1 \" type=\"number\" placeholder=\" Lost  \" />\n                            <input className=\" mt-1 \" type=\"number\" placeholder=\" Out of Order Stitched  \" />\n                        </div>\n                    )\n                }\n            }) :\n            null\n        }\n\n    </div>\n    )\n}\n","/home/faiza/Documents/GitHub/Tailor_App/src/components/alreadyCondition.tsx",["111","112","113","114","115","116","117"],"import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport firebase from 'firebase';\nimport { checkStitch, checkDeliveredFirebase, checkUnStitchFirebase, checkLostFirebase, checkOutOfOrder, checkLost, checkOutOfOrderFirebase } from './store';\n\nexport const AlreadyCondition = () => {\n    const dispatch = useDispatch();\n    const customerState = useSelector((state: any) => state);\n    const tailor: any = customerState.tailors[0];\n    const client: any = customerState.customer[0];\n    const promise = () => {\n        firebase.firestore().collection('Condition').doc(tailor).collection(\"Sticthed\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().sticthed;\n                    checkStitch(clientName, conditionAmount, customerState, dispatch)\n                })\n            }).catch();\n        firebase.firestore().collection('Condition').doc(tailor).collection(\"Delivered\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().delivered;\n                    checkDeliveredFirebase(clientName, conditionAmount, customerState, dispatch)\n                })\n            }).catch()\n        firebase.firestore().collection('Condition').doc(tailor).collection(\"UnStitched\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().unstitched;\n                    checkUnStitchFirebase(clientName, conditionAmount, customerState, dispatch);\n                })\n            }).catch()\n        firebase.firestore().collection('Condition').doc(tailor).collection(\"Losted\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().losted;\n                    checkLostFirebase(clientName, conditionAmount, customerState, dispatch);\n                })\n            }).catch()\n        firebase.firestore().collection('Condition').doc(tailor).collection(\"OutOfOrder\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().OutOfOrder;\n                    checkOutOfOrder(clientName, conditionAmount, customerState, dispatch);\n                })\n            }).catch()\n    }\n    promise();\n\n    return (\n        <div id=\"condition\" className=\"mt-5 text-left ml-5\">\n            <div className=\"mt-5\">\n                {\n                    customerState.orders.length > 0 ?\n                        customerState.stitch.length > 0 ?\n                            customerState.stitch.map((stitch: any[], index: number) => {\n                                if (stitch[0] === client) {\n                                    return (\n                                        <p className=\"text-muted\" key={index}>  {stitch[1]} orders has stitched.</p>\n                                    )\n                                }\n                            }) : null\n                        : null\n                }\n                {\n                    customerState.orders.length > 0 ?\n                        customerState.delivered.length > 0 ?\n                            customerState.delivered.map((deliver: any[], index: number) => {\n                                if (deliver[0] === client) {\n                                    return (\n                                        <p className=\"text-muted\" key={index}>  {deliver[1]} orders has delivered.</p>\n                                    )\n                                }\n                            }) : null\n                        : null\n                }\n                {\n                    customerState.orders.length > 0 ?\n                        customerState.unStitch.length > 0 ?\n                            customerState.unStitch.map((unStitch: any[], index: number) => {\n                                if (unStitch[0] === client) {\n                                    return (\n                                        <p className=\"text-muted\" key={index}>  {unStitch[1]} orders are un stitched.</p>\n                                    )\n                                } else {\n                                    console.log(unStitch[0], client);\n\n                                }\n                            }) : null\n                        : null\n                }\n                {\n                    customerState.orders.length > 0 ?\n                        customerState.lost.length > 0 ?\n                            customerState.lost.map((losted: any, index: number) => {\n                                if (losted[0] === client) {\n                                    return (\n                                        <p className=\"text-muted\" key={index}> {losted[1]} orders has losted.</p>\n                                    )\n                                }\n                            }) : null\n                        : null\n                }\n                {\n                    customerState.outOfOrder.length > 0 ?\n                        customerState.outOfOrder.length > 0 ?\n                            customerState.outOfOrder.map((outOfOrder: any, index: number) => {\n                                if (outOfOrder[0] === client) {\n                                    return (\n                                        <p className=\"text-muted\" key={index}> {outOfOrder[1]} orders has wrong stitched.</p>\n                                    )\n                                }\n                            }) : null\n                        : null\n                }\n            </div>\n        </div>\n    )\n}","/home/faiza/Documents/GitHub/Tailor_App/src/components/EditMeasurment.tsx",["118","119"],"import { useSelector, useDispatch } from 'react-redux';\nimport { checkMeasurment, deleteClient } from './index';\nimport { history } from './index';\nimport firebase from 'firebase';\n\nexport function EditMeasurment() {\n    const customerState = useSelector((state: any) => state);\n    const client: any = customerState.customer[0];\n    const tailor: any = customerState.tailors[0];\n    const dispatch = useDispatch();\n    const saveMeasurment: any = (e: any) => {\n        e.preventDefault();\n        let previousMeasurment;\n        const [Length, Width, Neck, Chest, Waist, Bust, ArmLenght, ShoulderLenght, LegLenght] = e.target;\n        customerState.measurment.map((measurment: any, index: number) => {\n            if (measurment[0] === client) {\n                previousMeasurment = measurment[1];\n                const measurmentEle = {\n                    Length: Length.value > 0 ? Length.value : previousMeasurment.Length, Width: Width.value > 0 ? Width.value : previousMeasurment.Width, Chest: Chest.value > 0 ? Chest.value : previousMeasurment.Chest, Bust: Bust.value > 0 ? Bust.value : previousMeasurment.Bust, Waist: Waist.value > 0 ? Waist.value : previousMeasurment.Waist, Neck: Neck.value > 0 ? Neck.value : previousMeasurment.Neck, ArmLenght: ArmLenght.value > 0 ? ArmLenght.value : previousMeasurment.ArmLenght, Shoulder: ShoulderLenght.value > 0 ? ShoulderLenght.value : previousMeasurment.Shoulder, LegLenght: LegLenght.value > 0 ? LegLenght.value : previousMeasurment.LegLenght,\n                };\n                const promise = firebase.firestore().collection('Measurments').doc(tailor).collection(\"Customer\").doc(client).set({\n                    measurmentEle\n                });\n                promise.then(() => {\n                    checkMeasurment( client, measurmentEle, dispatch, customerState.measurment);\n                    history.push(\"/Measurment\");\n                    history.replace(\"/Measurment\");\n                    dispatch(deleteClient());\n                })\n                promise.catch((err) => {\n                    alert(err.message);\n                    dispatch(deleteClient());\n                })\n            }\n\n        });\n    }\n\n\n\n\n\n    return (\n        <div >\n            <div className=\"mr-5\">\n                {customerState.measurment.length > 0 ?\n                    customerState.measurment.map((measurment: any, index: number) => {\n                        if (measurment[0] === client) {\n                            return (\n                                <div id=\"editM\">\n                                    <form onSubmit={saveMeasurment} key={index}>\n                                        <div className=\"EditM\">\n                                            <div>\n                                                <label>Length</label>\n                                                <input className=\"mt-1\" type=\"number\" placeholder={measurment[1].Length} />\n                                            </div>\n                                            <div>\n                                                <label>Width</label>\n                                                <input className=\"mt-1\" type=\"number\" placeholder={measurment[1].Width} />\n                                            </div>\n                                            <div> <label>Chest</label>\n                                                <input className=\"mt-1\" type=\"number\" placeholder={measurment[1].Chest} />\n                                            </div>\n                                        </div>\n                                        <div className=\"EditM\">\n                                            <div>\n                                                <label>Waist</label>\n                                                <input className=\"mt-1\" type=\"number\" placeholder={measurment[1].Waist} />\n                                            </div>\n                                            <div>\n                                                <label>Bust</label>\n                                                <input className=\"mt-1\" type=\"number\" placeholder={measurment[1].Bust} />\n                                            </div>\n                                            <div>\n                                                <label>Arm</label>\n                                                <input className=\"mt-1\" type=\"number\" placeholder={measurment[1].ArmLenght} />\n                                            </div>\n                                        </div>\n                                        <div className=\"EditM\">\n                                            <div>\n                                                <label>Shoulder</label>\n                                                <input className=\"mt-1\" type=\"number\" placeholder={measurment[1].Shoulder} />\n                                            </div>\n                                            <div>\n                                                <label>Neck</label>\n                                                <input className=\"mt-1\" type=\"number\" placeholder={measurment[1].Neck} />\n                                            </div>\n                                            <div>\n                                                <label>Leg Length</label>\n                                                <input className=\"mt-1\" type=\"number\" placeholder={measurment[1].LegLenght} />\n                                            </div>\n                                        </div>\n                                        <button className=\"btn btn-outline-success d-inline m-0 mt-1 w-25\" type=\"submit\">Edit Measurment</button>\n                                        <button className=\"btn btn-outline-danger d-inline m-0 mt-1 ml-1 w-25\" onClick={() => {\n                                            history.push(\"/Measurment\"); history.replace('/Measurment')\n                                            dispatch(deleteClient());\n                                        }}>Cancle</button>\n                                    </form>\n                                </div>\n                            )\n                        }\n                    })\n                    :\n                    <div>\n                        <h1 className=\"h1 font-italic text-muted\">\n                            Please login first\n                             </h1>\n                        <button className=\"btn btn-outline-danger\" onClick={\n                            () => {\n                                history.push('/SignIn')\n                                history.replace('/SignIn')\n                            }\n                        }>\n                            Go to Sign In\n                             </button>\n                        <button className=\"btn btn-outline-success\" onClick={\n                            () => {\n                                history.push('/SignUp')\n                                history.replace('/SignUp')\n                            }\n                        }>\n                            Go to Sign Up\n                             </button>\n                    </div>\n                }\n            </div>\n        </div >\n    )\n}\n\n\n","/home/faiza/Documents/GitHub/Tailor_App/src/components/reducer.tsx",[],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":2,"column":8,"nodeType":"126","messageId":"127","endLine":2,"endColumn":16},{"ruleId":"128","severity":1,"message":"129","line":51,"column":73,"nodeType":"130","messageId":"131","endLine":51,"endColumn":75},{"ruleId":"124","severity":1,"message":"132","line":338,"column":11,"nodeType":"126","messageId":"127","endLine":338,"endColumn":17},{"ruleId":"124","severity":1,"message":"133","line":439,"column":13,"nodeType":"126","messageId":"127","endLine":439,"endColumn":24},{"ruleId":"124","severity":1,"message":"134","line":444,"column":13,"nodeType":"126","messageId":"127","endLine":444,"endColumn":27},{"ruleId":"124","severity":1,"message":"135","line":449,"column":13,"nodeType":"126","messageId":"127","endLine":449,"endColumn":26},{"ruleId":"124","severity":1,"message":"136","line":454,"column":13,"nodeType":"126","messageId":"127","endLine":454,"endColumn":22},{"ruleId":"124","severity":1,"message":"137","line":459,"column":13,"nodeType":"126","messageId":"127","endLine":459,"endColumn":28},{"ruleId":"138","severity":1,"message":"139","line":473,"column":97,"nodeType":"140","messageId":"141","endLine":473,"endColumn":98,"fix":"142"},{"ruleId":"138","severity":1,"message":"139","line":475,"column":100,"nodeType":"140","messageId":"141","endLine":475,"endColumn":101,"fix":"143"},{"ruleId":"138","severity":1,"message":"139","line":477,"column":95,"nodeType":"140","messageId":"141","endLine":477,"endColumn":96,"fix":"144"},{"ruleId":"138","severity":1,"message":"139","line":479,"column":99,"nodeType":"140","messageId":"141","endLine":479,"endColumn":100,"fix":"145"},{"ruleId":"138","severity":1,"message":"139","line":481,"column":96,"nodeType":"140","messageId":"141","endLine":481,"endColumn":97,"fix":"146"},{"ruleId":"138","severity":1,"message":"139","line":483,"column":100,"nodeType":"140","messageId":"141","endLine":483,"endColumn":101,"fix":"147"},{"ruleId":"138","severity":1,"message":"139","line":485,"column":98,"nodeType":"140","messageId":"141","endLine":485,"endColumn":99,"fix":"148"},{"ruleId":"138","severity":1,"message":"139","line":487,"column":100,"nodeType":"140","messageId":"141","endLine":487,"endColumn":101,"fix":"149"},{"ruleId":"128","severity":1,"message":"129","line":27,"column":68,"nodeType":"130","messageId":"131","endLine":27,"endColumn":70},{"ruleId":"124","severity":1,"message":"150","line":38,"column":9,"nodeType":"126","messageId":"127","endLine":38,"endColumn":28},{"ruleId":"128","severity":1,"message":"129","line":96,"column":71,"nodeType":"130","messageId":"131","endLine":96,"endColumn":73},{"ruleId":"128","severity":1,"message":"129","line":8,"column":68,"nodeType":"130","messageId":"131","endLine":8,"endColumn":70},{"ruleId":"124","severity":1,"message":"151","line":4,"column":106,"nodeType":"126","messageId":"127","endLine":4,"endColumn":115},{"ruleId":"124","severity":1,"message":"152","line":4,"column":117,"nodeType":"126","messageId":"127","endLine":4,"endColumn":140},{"ruleId":"128","severity":1,"message":"129","line":61,"column":85,"nodeType":"130","messageId":"131","endLine":61,"endColumn":87},{"ruleId":"128","severity":1,"message":"129","line":73,"column":89,"nodeType":"130","messageId":"131","endLine":73,"endColumn":91},{"ruleId":"128","severity":1,"message":"129","line":85,"column":89,"nodeType":"130","messageId":"131","endLine":85,"endColumn":91},{"ruleId":"128","severity":1,"message":"129","line":100,"column":81,"nodeType":"130","messageId":"131","endLine":100,"endColumn":83},{"ruleId":"128","severity":1,"message":"129","line":112,"column":91,"nodeType":"130","messageId":"131","endLine":112,"endColumn":93},{"ruleId":"128","severity":1,"message":"153","line":15,"column":71,"nodeType":"130","messageId":"154","endLine":15,"endColumn":73},{"ruleId":"128","severity":1,"message":"129","line":47,"column":83,"nodeType":"130","messageId":"131","endLine":47,"endColumn":85},"no-native-reassign",["155"],"no-negated-in-lhs",["156"],"@typescript-eslint/no-unused-vars","'firebase' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'tailor' is assigned a value but never used.","'stitchIndex' is assigned a value but never used.","'deliveredIndex' is assigned a value but never used.","'unStitchIndex' is assigned a value but never used.","'lostIndex' is assigned a value but never used.","'outOfOrderIndex' is assigned a value but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"157","text":"158"},{"range":"159","text":"158"},{"range":"160","text":"158"},{"range":"161","text":"158"},{"range":"162","text":"158"},{"range":"163","text":"158"},{"range":"164","text":"158"},{"range":"165","text":"158"},"'saveMeasurment' is assigned a value but never used.","'checkLost' is defined but never used.","'checkOutOfOrderFirebase' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-global-assign","no-unsafe-negation",[14442,14452],"\n        .",[14561,14571],[14675,14685],[14793,14803],[14908,14918],[15027,15037],[15144,15154],[15263,15273]]