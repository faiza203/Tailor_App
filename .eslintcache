[{"/home/faiza/Documents/Git Hub/tailor_app/src/index.tsx":"1","/home/faiza/Documents/Git Hub/tailor_app/src/components/index.tsx":"2","/home/faiza/Documents/Git Hub/tailor_app/src/components/Home.tsx":"3","/home/faiza/Documents/Git Hub/tailor_app/src/components/SignIn.tsx":"4","/home/faiza/Documents/Git Hub/tailor_app/src/components/firebase.tsx":"5","/home/faiza/Documents/Git Hub/tailor_app/src/components/NotFound.tsx":"6","/home/faiza/Documents/Git Hub/tailor_app/src/components/AddMeasurment.tsx":"7","/home/faiza/Documents/Git Hub/tailor_app/src/components/history.tsx":"8","/home/faiza/Documents/Git Hub/tailor_app/src/components/store.tsx":"9","/home/faiza/Documents/Git Hub/tailor_app/src/components/SignUp.tsx":"10","/home/faiza/Documents/Git Hub/tailor_app/src/components/Customers.tsx":"11","/home/faiza/Documents/Git Hub/tailor_app/src/components/DashBoard.tsx":"12","/home/faiza/Documents/Git Hub/tailor_app/src/components/reducer.tsx":"13","/home/faiza/Documents/Git Hub/tailor_app/src/App.tsx":"14","/home/faiza/Documents/Git Hub/tailor_app/src/components/AddDetail.tsx":"15","/home/faiza/Documents/Git Hub/tailor_app/src/components/AddOrder.tsx":"16","/home/faiza/Documents/Git Hub/tailor_app/src/components/AlreadyMeasurment.tsx":"17","/home/faiza/Documents/Git Hub/tailor_app/src/components/Condition.tsx":"18","/home/faiza/Documents/Git Hub/tailor_app/src/components/alreadyCondition.tsx":"19"},{"size":330,"mtime":1606992343000,"results":"20","hashOfConfig":"21"},{"size":861,"mtime":1607756775997,"results":"22","hashOfConfig":"21"},{"size":656,"mtime":1606992343000,"results":"23","hashOfConfig":"21"},{"size":1096,"mtime":1607757248620,"results":"24","hashOfConfig":"21"},{"size":562,"mtime":1606992343000,"results":"25","hashOfConfig":"21"},{"size":595,"mtime":1607251724440,"results":"26","hashOfConfig":"21"},{"size":5872,"mtime":1607690188358,"results":"27","hashOfConfig":"21"},{"size":95,"mtime":1607326904207,"results":"28","hashOfConfig":"21"},{"size":14659,"mtime":1607586357104,"results":"29","hashOfConfig":"21"},{"size":2450,"mtime":1607756823264,"results":"30","hashOfConfig":"21"},{"size":1972,"mtime":1607757484176,"results":"31","hashOfConfig":"21"},{"size":1972,"mtime":1607757402410,"results":"32","hashOfConfig":"21"},{"size":3387,"mtime":1607687551301,"results":"33","hashOfConfig":"21"},{"size":898,"mtime":1607756766720,"results":"34","hashOfConfig":"21"},{"size":2465,"mtime":1607519498755,"results":"35","hashOfConfig":"21"},{"size":1452,"mtime":1607434369573,"results":"36","hashOfConfig":"21"},{"size":5819,"mtime":1607758163230,"results":"37","hashOfConfig":"21"},{"size":1314,"mtime":1607525686453,"results":"38","hashOfConfig":"21"},{"size":5734,"mtime":1607525897221,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"34fyjp",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"45"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"45"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"45"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"45"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"45"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"42"},"/home/faiza/Documents/Git Hub/tailor_app/src/index.tsx",[],["87","88"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/index.tsx",[],["89","90"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/Home.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/SignIn.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/firebase.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/NotFound.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/AddMeasurment.tsx",["91","92","93"],"import React from 'react';\nimport firebase from 'firebase';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { checkFirebaseMeasurment, checkMeasurment } from './index';\nimport { history } from './history';\nimport { AlreadyMeasurment } from './AlreadyMeasurment';\nexport function Measurment() {\n    const client: any = localStorage.getItem(\"customer\");\n    const tailor: any = localStorage.getItem(\"tailor\");\n    const dispatch = useDispatch();\n    const customerState = useSelector((state: any) => state);\n    const promise = () => {\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Measurment\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const measurment = client.data().measurmentEle;\n                    checkFirebaseMeasurment(clientName, measurment, dispatch, customerState.measurment);\n                })\n            }).catch()\n    }\n    promise();\n\n    const saveMeasurment: any = (e: any) => {\n        e.preventDefault();\n\n        const [Length, Width, Neck, Chest, Waist, Bust, ArmLenght, ShoulderLenght, LegLenght] = e.target;\n        const measurmentEle = {\n            Length: Length.value, Width: Width.value, Chest: Chest.value, Waist: Waist.value, Neck: Neck.value, ArmLenght: ArmLenght.value, Shoulder: ShoulderLenght.value, LegLenght: LegLenght.value,\n        }\n\n        firebase.database().ref().on(\"child_added\", snap => {\n            const promise = firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Measurment\").doc(client).set({\n                measurmentEle\n            });\n            promise.then(() => {\n                alert(\"Data is updated\");\n                checkMeasurment(client, measurmentEle, dispatch, customerState.measurment);\n                history.push(\"/DashBoard\");\n                history.replace(\"/DashBoard\");\n            })\n            promise.catch((err) => {\n                alert(err.message)\n            })\n        });\n    }\n\n    let arr = [];\n    return (\n        <div>\n            <h1 className=\"h1 text-muted\">Measurment</h1>\n            {customerState.measurment.length > 0 ?\n                customerState.measurment.map((measurment: any[], index: number) => {\n                    if (measurment[0] === client) {\n                        return (<AlreadyMeasurment client={client} />)\n                    } else {\n                        arr.push(\"yes\")\n                    } if (arr.length === customerState.measurment.length) {\n                        <AddMeasurment />\n                    }\n                })\n                : <AddMeasurment />\n            }\n        </div>\n    )\n}\n\n\n\nexport const AddMeasurment = () => {\n    const client: any = localStorage.getItem(\"customer\");\n    const tailor: any = localStorage.getItem(\"tailor\");\n    const dispatch = useDispatch();\n    const customerState = useSelector((state: any) => state);\n    const promise = () => {\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Measurment\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const measurment = client.data().measurmentEle;\n                    checkFirebaseMeasurment(clientName, measurment, dispatch, customerState.measurment);\n                })\n            }).catch()\n    }\n    promise();\n\n    const saveMeasurment: any = (e: any) => {\n        e.preventDefault();\n\n        const [Length, Width, Neck, Chest, Waist, Bust, ArmLenght, ShoulderLenght, LegLenght] = e.target;\n        const measurmentEle = {\n            Length: Length.value, Width: Width.value, Chest: Chest.value, Bust: Bust.value, Waist: Waist.value, Neck: Neck.value, ArmLenght: ArmLenght.value, Shoulder: ShoulderLenght.value, LegLenght: LegLenght.value,\n        }\n\n        firebase.database().ref().on(\"child_added\", snap => {\n            const promise = firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Measurment\").doc(client).set({\n                measurmentEle\n            });\n            promise.then(() => {\n                alert(\"Data is updated\");\n                checkMeasurment(client, measurmentEle, dispatch, customerState.measurment);\n                history.push(\"/DashBoard\");\n                history.replace(\"/DashBoard\");\n            })\n            promise.catch((err) => {\n                alert(err.message)\n            })\n        });\n    }\n\n    return (<div>\n        <div className=\"measurment\">\n            <form className=\"mr-5 \" onSubmit={saveMeasurment}>\n                <input className=\"form-control\" type=\"number\" placeholder=\"Length\" required />\n                <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Width\" required />\n                <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Neck\" required />\n                <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Chest\" required />\n                <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Waist\" required />\n                <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Bust\" required />\n                <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Arm Width\" required />\n                <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Shoulder Width\" required />\n                <input className=\"form-control mt-1\" type=\"number\" placeholder=\"Leg Lenght\" required />\n                <button className=\"btn btn-outline-success d-inline\" type=\"submit\">Save Measurment</button>\n                <button className=\"btn btn-outline-danger\" type=\"button\" onClick={() => { history.push(\"/DashBoard\"); history.replace('/DashBoard') }}>Cancle</button>\n            </form>\n        </div>\n    </div>\n    )\n}\n","/home/faiza/Documents/Git Hub/tailor_app/src/components/history.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/store.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/SignUp.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/Customers.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/DashBoard.tsx",[],"/home/faiza/Documents/Git Hub/tailor_app/src/components/reducer.tsx",[],["94","95"],"/home/faiza/Documents/Git Hub/tailor_app/src/App.tsx",["96"],"import React from 'react';\nimport { Router, Route, Switch } from 'react-router';\nimport { Home, SignUp, SignIn, DashBoard, NotFound, history, AddDetail, Measurment, AddMeasurment } from './components/index';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './style.css';\n\nfunction App() {\n\n  return (\n    <div className=\"App text-center\">\n      <Router history={history}>\n        <Switch>\n          <Route path=\"/\" component={Home} exact></Route>\n          <Route path=\"/SignUp\" component={SignUp}></Route>\n          <Route path=\"/SignIn\" component={SignIn}></Route>\n          <Route path=\"/DashBoard\" component={DashBoard}></Route>\n          <Route path=\"/Measurment\" component={Measurment}></Route>\n          <Route path=\"/Orders\" component={AddDetail}></Route>\n          <Route path=\"\" component={NotFound}></Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/home/faiza/Documents/Git Hub/tailor_app/src/components/AddDetail.tsx",["97"],"import React from 'react';\nimport { AddOrder, checkOrder, history, AlreadyCondition } from './index';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Condition } from './Condition';\nimport { checkStitch, checkDelivered, checkUnStitch, checkLost, checkOutOfOrder } from './store';\nimport firebase from 'firebase';\n\nexport const AddDetail = () => {\n    const dispatch = useDispatch();\n    const customerState = useSelector((state: any) => state);\n    const client: any = localStorage.getItem(\"customer\");\n    const tailor: any = localStorage.getItem(\"tailor\");\n\n    const saveDetail: any = (e: any) => {\n        e.preventDefault();\n\n        const [NewOrders, sticthed, delivered, unStitched, lost, outOfOrder] = e.target;\n        if (NewOrders) {\n            if (NewOrders.value > 0) {\n                checkOrder(client, NewOrders.value, customerState.orders, dispatch)\n            }\n        }\n\n        if (sticthed) {\n\n            if (sticthed.value > 0) {\n                checkStitch(client, sticthed.value, customerState.stitch, dispatch)\n            }\n        }\n\n        if (delivered) {\n            if (delivered.value > 0) {\n                checkDelivered(client, delivered.value, customerState.delivered, dispatch)\n            }\n        }\n        if (unStitched) {\n\n            if (unStitched.value > 0) {\n                checkUnStitch(client, unStitched.value, customerState.unStitch, dispatch);\n            }\n        }\n        if (lost) {\n            if (lost.value > 0) {\n                checkLost(tailor, client, lost.value, customerState.lost, dispatch)\n            }\n        }\n        if (outOfOrder) {\n            if (outOfOrder.value > 0) {\n                checkOutOfOrder(tailor, client, outOfOrder.value, customerState.outOfOrder, dispatch)\n            }\n        }\n        history.push(\"/DashBoard\");\n        history.replace(\"/DashBoard\");\n    }\n    return (\n        <form onSubmit={saveDetail}>\n            <div id=\"addDetail\">\n                <AddOrder client={client} />\n                <Condition client={client} tailor={tailor} />\n                <AlreadyCondition client={client} tailor={tailor} />\n            </div>\n            <button id=\"saveDetail\" className=\"btn btn-outline-primary\" type=\"submit\">Save Detail</button>\n            <button className=\"btn btn-outline-success\" type=\"button\" onClick={() => { history.push(\"/DashBoard\"); history.replace('/DashBoard') }}>Save Without Changing</button>\n        </form>\n    )\n}","/home/faiza/Documents/Git Hub/tailor_app/src/components/AddOrder.tsx",["98"],"import React from 'react';\nimport firebase from 'firebase';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { checkOrderFirebase } from './index';\nexport const AddOrder = (props: any) => {\n    const dispatch = useDispatch();\n    const customerState = useSelector((state: any) => state);\n    const tailor: any = localStorage.getItem(\"tailor\");\n    const promise = () => {\n        firebase.firestore().collection('Tailor App').doc(tailor).collection(\"Orders\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const orders = client.data().orders;\n\n                    checkOrderFirebase(clientName, orders, customerState.orders, dispatch)\n                })\n            });\n    }\n    promise();\n\n    return (<div>\n        <h1 className=\"h1 text-muted\">Orders</h1>\n        <p className=\"text-muted\">If you want to stitch new dress: </p>\n        <input className=\"d-inline form-control\" type=\"text\" placeholder=\"Add number of orders here\" />\n        {customerState.orders.length > 0 ?\n            customerState.orders.map((order: any[], index: number) => {\n                if (order[0] === props.client) {\n                    return (\n                        <p key={index} className=\"text-muted mt-1\">Already Orders are {order[1]}</p>\n                    )\n                }\n            }) :\n            null\n        }\n    </div>)\n}","/home/faiza/Documents/Git Hub/tailor_app/src/components/AlreadyMeasurment.tsx",["99","100"],"/home/faiza/Documents/Git Hub/tailor_app/src/components/Condition.tsx",["101","102","103","104","105"],"import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport firebase from 'firebase';\nimport { checkStitch, checkDeliveredFirebase, checkUnStitchFirebase } from './store';\n\nexport const Condition = (props: any) => {\n    const customerState = useSelector((state: any) => state);\n    return (<div id=\"addCondition\">\n        {\n            customerState.orders.length > 0 ?\n                <div className=\"condition\">\n                    <h1 className=\"h1 text-muted\">Condition</h1>\n                    <p className=\"text-muted\">If you want to add Condition : </p>\n                    <input className=\"w-75 d-inline form-control\" type=\"number\" placeholder=\"Add stitched dress number\" />\n                    <input className=\"w-75 d-inline mt-1 form-control\" type=\"number\" placeholder=\"Add develired dress number\" />\n                    <input className=\"w-75 d-inline mt-1 form-control\" type=\"number\" placeholder=\"Add un stitched dress number\" />\n                    <input className=\"w-75 d-inline mt-1 form-control\" type=\"number\" placeholder=\"Add lost dress number\" />\n                    <input className=\"w-75 d-inline mt-1 form-control\" type=\"number\" placeholder=\"Add out of order stitched dress number\" />\n                </div> :\n                null\n        }\n    </div>\n    )\n}\n","/home/faiza/Documents/Git Hub/tailor_app/src/components/alreadyCondition.tsx",["106","107","108","109","110","111","112"],"import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport firebase from 'firebase';\nimport { checkStitch, checkDeliveredFirebase, checkUnStitchFirebase, checkLostFirebase, checkOutOfOrder, checkLost, checkOutOfOrderFirebase } from './store';\n\nexport const AlreadyCondition = (props: any) => {\n    const dispatch = useDispatch();\n    const customerState = useSelector((state: any) => state);\n    const promise = () => {\n        firebase.firestore().collection('Tailor App').doc(props.tailor).collection(\"Sticthed\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().sticthed;\n                    checkStitch(clientName, conditionAmount, customerState.stitch, dispatch)\n                })\n            }).catch();\n        firebase.firestore().collection('Tailor App').doc(props.tailor).collection(\"Delivered\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().delivered;\n                    checkDeliveredFirebase(clientName, conditionAmount, customerState.delivered, dispatch)\n                })\n            }).catch()\n        firebase.firestore().collection('Tailor App').doc(props.tailor).collection(\"UnStitched\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().unstitched;\n                    checkUnStitchFirebase(clientName, conditionAmount, customerState.unStitch, dispatch);\n                })\n            }).catch()\n        firebase.firestore().collection('Tailor App').doc(props.tailor).collection(\"Losted\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().losted;\n                    checkLostFirebase(props.tailor, clientName, conditionAmount, customerState.lost, dispatch);\n                })\n            }).catch()\n        firebase.firestore().collection('Tailor App').doc(props.tailor).collection(\"OutOfOrder\").get()\n            .then(snapshot => {\n                snapshot.docs.forEach(client => {\n                    const clientName = client.id;\n                    const conditionAmount = client.data().OutOfOrder;\n                    checkOutOfOrder(props.tailor, clientName, conditionAmount, customerState.outOfOrder, dispatch);\n                })\n            }).catch()\n    }\n    promise();\n\n    return (\n        <div id=\"condition\">\n            {\n                customerState.orders.length > 0 ?\n                    customerState.stitch.length > 0 ?\n                        customerState.stitch.map((stitch: any[], index: number) => {\n                            if (stitch[0] === props.client) {\n                                return (\n                                    <p className=\"text-muted\" key={index}>  {stitch[1]} orders has stitched.</p>\n                                )\n                            }\n                        }) : null\n                    : null\n            }\n            {\n                customerState.orders.length > 0 ?\n                    customerState.delivered.length > 0 ?\n                        customerState.delivered.map((deliver: any[], index: number) => {\n                            if (deliver[0] === props.client) {\n                                return (\n                                    <p className=\"text-muted\" key={index}>  {deliver[1]} orders has delivered.</p>\n                                )\n                            }\n                        }) : null\n                    : null\n            }\n            {\n                customerState.orders.length > 0 ?\n                    customerState.unStitch.length > 0 ?\n                        customerState.unStitch.map((unStitch: any[], index: number) => {\n                            if (unStitch[0] === props.client) {\n                                return (\n                                    <p className=\"text-muted\" key={index}>  {unStitch[1]} orders are un stitched.</p>\n                                )\n                            } else {\n                                console.log(unStitch[0], props.client);\n\n                            }\n                        }) : null\n                    : null\n            }\n            {\n                customerState.orders.length > 0 ?\n                    customerState.lost.length > 0 ?\n                        customerState.lost.map((losted: any, index: number) => {\n                            if (losted[0] === props.client) {\n                                return (\n                                    <p className=\"text-muted\" key={index}> {losted[1]} orders has losted.</p>\n                                )\n                            }\n                        }) : null\n                    : null\n            }\n            {\n                customerState.outOfOrder.length > 0 ?\n                    customerState.outOfOrder.length > 0 ?\n                        customerState.outOfOrder.map((outOfOrder: any, index: number) => {\n                            if (outOfOrder[0] === props.client) {\n                                return (\n                                    <p className=\"text-muted\" key={index}> {outOfOrder[1]} orders has wrong stitched.</p>\n                                )\n                            }\n                        }) : null\n                    : null\n            }\n        </div>\n    )\n}",{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"113","replacedBy":"117"},{"ruleId":"115","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":24,"column":11,"nodeType":"121","messageId":"122","endLine":24,"endColumn":30},{"ruleId":"119","severity":1,"message":"123","line":27,"column":51,"nodeType":"121","messageId":"122","endLine":27,"endColumn":55},{"ruleId":"124","severity":1,"message":"125","line":53,"column":81,"nodeType":"126","messageId":"127","endLine":53,"endColumn":83},{"ruleId":"113","replacedBy":"128"},{"ruleId":"115","replacedBy":"129"},{"ruleId":"119","severity":1,"message":"130","line":3,"column":85,"nodeType":"121","messageId":"122","endLine":3,"endColumn":98},{"ruleId":"119","severity":1,"message":"131","line":6,"column":8,"nodeType":"121","messageId":"122","endLine":6,"endColumn":16},{"ruleId":"124","severity":1,"message":"125","line":27,"column":68,"nodeType":"126","messageId":"127","endLine":27,"endColumn":70},{"ruleId":"119","severity":1,"message":"132","line":6,"column":10,"nodeType":"121","messageId":"122","endLine":6,"endColumn":17},{"ruleId":"124","severity":1,"message":"125","line":51,"column":81,"nodeType":"126","messageId":"127","endLine":51,"endColumn":83},{"ruleId":"119","severity":1,"message":"133","line":2,"column":23,"nodeType":"121","messageId":"122","endLine":2,"endColumn":34},{"ruleId":"119","severity":1,"message":"131","line":3,"column":8,"nodeType":"121","messageId":"122","endLine":3,"endColumn":16},{"ruleId":"119","severity":1,"message":"134","line":4,"column":10,"nodeType":"121","messageId":"122","endLine":4,"endColumn":21},{"ruleId":"119","severity":1,"message":"135","line":4,"column":23,"nodeType":"121","messageId":"122","endLine":4,"endColumn":45},{"ruleId":"119","severity":1,"message":"136","line":4,"column":47,"nodeType":"121","messageId":"122","endLine":4,"endColumn":68},{"ruleId":"119","severity":1,"message":"137","line":4,"column":106,"nodeType":"121","messageId":"122","endLine":4,"endColumn":115},{"ruleId":"119","severity":1,"message":"138","line":4,"column":117,"nodeType":"121","messageId":"122","endLine":4,"endColumn":140},{"ruleId":"124","severity":1,"message":"125","line":58,"column":81,"nodeType":"126","messageId":"127","endLine":58,"endColumn":83},{"ruleId":"124","severity":1,"message":"125","line":70,"column":85,"nodeType":"126","messageId":"127","endLine":70,"endColumn":87},{"ruleId":"124","severity":1,"message":"125","line":82,"column":85,"nodeType":"126","messageId":"127","endLine":82,"endColumn":87},{"ruleId":"124","severity":1,"message":"125","line":97,"column":77,"nodeType":"126","messageId":"127","endLine":97,"endColumn":79},{"ruleId":"124","severity":1,"message":"125","line":109,"column":87,"nodeType":"126","messageId":"127","endLine":109,"endColumn":89},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],["139"],["140"],"@typescript-eslint/no-unused-vars","'saveMeasurment' is assigned a value but never used.","Identifier","unusedVar","'Bust' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["139"],["140"],"'AddMeasurment' is defined but never used.","'firebase' is defined but never used.","'isAnyOf' is defined but never used.","'useDispatch' is defined but never used.","'checkStitch' is defined but never used.","'checkDeliveredFirebase' is defined but never used.","'checkUnStitchFirebase' is defined but never used.","'checkLost' is defined but never used.","'checkOutOfOrderFirebase' is defined but never used.","no-global-assign","no-unsafe-negation"]